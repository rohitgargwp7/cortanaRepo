using System;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using windows_client.Model;
using windows_client.DbUtils;
using windows_client.utils;
using System.Windows;
using System.Threading;
using System.Diagnostics;
using System.Collections.Generic;
using System.Text;
using windows_client.Misc;
using windows_client.Languages;
using windows_client.ViewModel;
using Microsoft.Phone.Shell;
using windows_client.utils.Sticker_Helper;
using windows_client.utils.ServerTips;

namespace windows_client
{
    public class NetworkManager
    {
        /* message read by recipient */
        public static readonly string MESSAGE_READ = "mr";

        public static readonly string BULK_MESSAGES = "bm";

        public static readonly string MESSAGE = "m";

        public static readonly string SMS_CREDITS = "sc";

        public static readonly string DELIVERY_REPORT = "dr";

        public static readonly string SERVER_REPORT = "sr";

        public static readonly string USER_JOINED = "uj";

        public static readonly string USER_LEFT = "ul";

        public static readonly string START_TYPING = "st";

        public static readonly string END_TYPING = "et";

        public static readonly string INVITE_INFO = "ii";

        public static readonly string INVITE = "i";
        public static readonly string MULTIPLE_INVITE = "mi";

        public static readonly string ICON = "ic";

        public static readonly string SERVER_TIMESTAMP = "sts";
        public static readonly string LAST_SEEN = "ls";

        public static readonly string REQUEST_DISPLAY_PIC = "rdp";

        public static readonly string STICKER = "stk";

        public static readonly string ACTION = "action";

        public static readonly string ICON_REMOVE = "icr";

        public static readonly string TIPS_POPUP = "popup";
        private static readonly string TIPS_HEADER = "h";
        private static readonly string TIPS_BODY = "b";
        private static readonly string TIPS_ID = "i";

        public static bool turnOffNetworkManager = true;

        private HikePubSub pubSub;

        private static volatile NetworkManager instance;
        private static object syncRoot = new Object(); // this object is used to take lock while creating singleton
        private object lockObj = new object();
        public enum GroupChatState
        {
            ALREADY_ADDED_TO_GROUP, NEW_GROUP, ADD_MEMBER, DUPLICATE, KICKEDOUT_USER_ADDED
        }
        private NetworkManager()
        {
            pubSub = App.HikePubSubInstance;
        }

        public static NetworkManager Instance
        {
            get
            {
                if (instance == null)
                {
                    lock (syncRoot)
                    {
                        if (instance == null)
                            instance = new NetworkManager();
                    }
                }

                return instance;
            }
        }

        public void onMessage(string msg)
        {
            //500
            msg = "{\"d\":{\"msgs\":[{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143565,\"push\":false,\"i\":\"1409143565742\",\"hm\":\"second :1\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143566,\"push\":false,\"i\":\"1409143565743\",\"hm\":\"second :2\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143567,\"push\":false,\"i\":\"1409143565744\",\"hm\":\"second :3\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143568,\"push\":false,\"i\":\"1409143565745\",\"hm\":\"second :4\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143569,\"push\":false,\"i\":\"1409143565746\",\"hm\":\"second :5\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143570,\"push\":false,\"i\":\"1409143565747\",\"hm\":\"second :6\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143571,\"push\":false,\"i\":\"1409143565748\",\"hm\":\"second :7\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143572,\"push\":false,\"i\":\"1409143565749\",\"hm\":\"second :8\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143573,\"push\":false,\"i\":\"1409143565750\",\"hm\":\"second :9\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143574,\"push\":false,\"i\":\"1409143565751\",\"hm\":\"second :10\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143575,\"push\":false,\"i\":\"1409143565752\",\"hm\":\"second :11\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143576,\"push\":false,\"i\":\"1409143565753\",\"hm\":\"second :12\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143577,\"push\":false,\"i\":\"1409143565754\",\"hm\":\"second :13\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143578,\"push\":false,\"i\":\"1409143565755\",\"hm\":\"second :14\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143579,\"push\":false,\"i\":\"1409143565756\",\"hm\":\"second :15\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143580,\"push\":false,\"i\":\"1409143565757\",\"hm\":\"second :16\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143581,\"push\":false,\"i\":\"1409143565758\",\"hm\":\"second :17\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143582,\"push\":false,\"i\":\"1409143565759\",\"hm\":\"second :18\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143583,\"push\":false,\"i\":\"1409143565760\",\"hm\":\"second :19\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143584,\"push\":false,\"i\":\"1409143565761\",\"hm\":\"second :20\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143585,\"push\":false,\"i\":\"1409143565762\",\"hm\":\"second :21\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143586,\"push\":false,\"i\":\"1409143565763\",\"hm\":\"second :22\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143587,\"push\":false,\"i\":\"1409143565764\",\"hm\":\"second :23\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143588,\"push\":false,\"i\":\"1409143565765\",\"hm\":\"second :24\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143589,\"push\":false,\"i\":\"1409143565766\",\"hm\":\"second :25\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143590,\"push\":false,\"i\":\"1409143565767\",\"hm\":\"second :26\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143591,\"push\":false,\"i\":\"1409143565768\",\"hm\":\"second :27\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143592,\"push\":false,\"i\":\"1409143565769\",\"hm\":\"second :28\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143593,\"push\":false,\"i\":\"1409143565770\",\"hm\":\"second :29\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143594,\"push\":false,\"i\":\"1409143565771\",\"hm\":\"second :30\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143595,\"push\":false,\"i\":\"1409143565772\",\"hm\":\"second :31\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143596,\"push\":false,\"i\":\"1409143565773\",\"hm\":\"second :32\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143597,\"push\":false,\"i\":\"1409143565774\",\"hm\":\"second :33\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143598,\"push\":false,\"i\":\"1409143565775\",\"hm\":\"second :34\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143599,\"push\":false,\"i\":\"1409143565776\",\"hm\":\"second :35\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143600,\"push\":false,\"i\":\"1409143565777\",\"hm\":\"second :36\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143601,\"push\":false,\"i\":\"1409143565778\",\"hm\":\"second :37\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143603,\"push\":false,\"i\":\"1409143565779\",\"hm\":\"second :38\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143604,\"push\":false,\"i\":\"1409143565780\",\"hm\":\"second :39\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143605,\"push\":false,\"i\":\"1409143565781\",\"hm\":\"second :40\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143606,\"push\":false,\"i\":\"1409143565782\",\"hm\":\"second :41\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143607,\"push\":false,\"i\":\"1409143565783\",\"hm\":\"second :42\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143608,\"push\":false,\"i\":\"1409143565784\",\"hm\":\"second :43\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143609,\"push\":false,\"i\":\"1409143565785\",\"hm\":\"second :44\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143610,\"push\":false,\"i\":\"1409143565786\",\"hm\":\"second :45\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143611,\"push\":false,\"i\":\"1409143565787\",\"hm\":\"second :46\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143612,\"push\":false,\"i\":\"1409143565788\",\"hm\":\"second :47\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143613,\"push\":false,\"i\":\"1409143565789\",\"hm\":\"second :48\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143614,\"push\":false,\"i\":\"1409143565790\",\"hm\":\"second :49\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143615,\"push\":false,\"i\":\"1409143565791\",\"hm\":\"second :50\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143616,\"push\":false,\"i\":\"1409143565792\",\"hm\":\"second :51\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143617,\"push\":false,\"i\":\"1409143565793\",\"hm\":\"second :52\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143618,\"push\":false,\"i\":\"1409143565794\",\"hm\":\"second :53\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143619,\"push\":false,\"i\":\"1409143565795\",\"hm\":\"second :54\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143620,\"push\":false,\"i\":\"1409143565796\",\"hm\":\"second :55\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143621,\"push\":false,\"i\":\"1409143565797\",\"hm\":\"second :56\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143622,\"push\":false,\"i\":\"1409143565798\",\"hm\":\"second :57\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143623,\"push\":false,\"i\":\"1409143565799\",\"hm\":\"second :58\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143624,\"push\":false,\"i\":\"1409143565800\",\"hm\":\"second :59\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143625,\"push\":false,\"i\":\"1409143565801\",\"hm\":\"second :60\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143626,\"push\":false,\"i\":\"1409143565802\",\"hm\":\"second :61\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143627,\"push\":false,\"i\":\"1409143565803\",\"hm\":\"second :62\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143628,\"push\":false,\"i\":\"1409143565804\",\"hm\":\"second :63\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143629,\"push\":false,\"i\":\"1409143565805\",\"hm\":\"second :64\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143630,\"push\":false,\"i\":\"1409143565806\",\"hm\":\"second :65\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143631,\"push\":false,\"i\":\"1409143565807\",\"hm\":\"second :66\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143632,\"push\":false,\"i\":\"1409143565808\",\"hm\":\"second :67\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143633,\"push\":false,\"i\":\"1409143565809\",\"hm\":\"second :68\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143634,\"push\":false,\"i\":\"1409143565810\",\"hm\":\"second :69\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143635,\"push\":false,\"i\":\"1409143565811\",\"hm\":\"second :70\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143636,\"push\":false,\"i\":\"1409143565812\",\"hm\":\"second :71\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143637,\"push\":false,\"i\":\"1409143565813\",\"hm\":\"second :72\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143638,\"push\":false,\"i\":\"1409143565814\",\"hm\":\"second :73\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143639,\"push\":false,\"i\":\"1409143565815\",\"hm\":\"second :74\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143640,\"push\":false,\"i\":\"1409143565816\",\"hm\":\"second :75\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143641,\"push\":false,\"i\":\"1409143565817\",\"hm\":\"second :76\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143642,\"push\":false,\"i\":\"1409143565818\",\"hm\":\"second :77\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143643,\"push\":false,\"i\":\"1409143565819\",\"hm\":\"second :78\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143644,\"push\":false,\"i\":\"1409143565820\",\"hm\":\"second :79\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143645,\"push\":false,\"i\":\"1409143565821\",\"hm\":\"second :80\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143646,\"push\":false,\"i\":\"1409143565822\",\"hm\":\"second :81\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143647,\"push\":false,\"i\":\"1409143565823\",\"hm\":\"second :82\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143648,\"push\":false,\"i\":\"1409143565824\",\"hm\":\"second :83\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143649,\"push\":false,\"i\":\"1409143565825\",\"hm\":\"second :84\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143650,\"push\":false,\"i\":\"1409143565826\",\"hm\":\"second :85\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143651,\"push\":false,\"i\":\"1409143565827\",\"hm\":\"second :86\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143652,\"push\":false,\"i\":\"1409143565828\",\"hm\":\"second :87\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143653,\"push\":false,\"i\":\"1409143565829\",\"hm\":\"second :88\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143654,\"push\":false,\"i\":\"1409143565830\",\"hm\":\"second :89\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143655,\"push\":false,\"i\":\"1409143565831\",\"hm\":\"second :90\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143656,\"push\":false,\"i\":\"1409143565832\",\"hm\":\"second :91\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143657,\"push\":false,\"i\":\"1409143565833\",\"hm\":\"second :92\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143658,\"push\":false,\"i\":\"1409143565834\",\"hm\":\"second :93\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143659,\"push\":false,\"i\":\"1409143565835\",\"hm\":\"second :94\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143660,\"push\":false,\"i\":\"1409143565836\",\"hm\":\"second :95\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143661,\"push\":false,\"i\":\"1409143565837\",\"hm\":\"second :96\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143662,\"push\":false,\"i\":\"1409143565838\",\"hm\":\"second :97\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143663,\"push\":false,\"i\":\"1409143565839\",\"hm\":\"second :98\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143664,\"push\":false,\"i\":\"1409143565840\",\"hm\":\"second :99\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143665,\"push\":false,\"i\":\"1409143565841\",\"hm\":\"second :100\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143666,\"push\":false,\"i\":\"1409143565842\",\"hm\":\"second :101\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143667,\"push\":false,\"i\":\"1409143565843\",\"hm\":\"second :102\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143668,\"push\":false,\"i\":\"1409143565844\",\"hm\":\"second :103\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143669,\"push\":false,\"i\":\"1409143565845\",\"hm\":\"second :104\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143670,\"push\":false,\"i\":\"1409143565846\",\"hm\":\"second :105\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143671,\"push\":false,\"i\":\"1409143565847\",\"hm\":\"second :106\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143672,\"push\":false,\"i\":\"1409143565848\",\"hm\":\"second :107\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143673,\"push\":false,\"i\":\"1409143565849\",\"hm\":\"second :108\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143674,\"push\":false,\"i\":\"1409143565850\",\"hm\":\"second :109\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143675,\"push\":false,\"i\":\"1409143565851\",\"hm\":\"second :110\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143676,\"push\":false,\"i\":\"1409143565852\",\"hm\":\"second :111\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143677,\"push\":false,\"i\":\"1409143565853\",\"hm\":\"second :112\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143678,\"push\":false,\"i\":\"1409143565854\",\"hm\":\"second :113\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143679,\"push\":false,\"i\":\"1409143565855\",\"hm\":\"second :114\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143680,\"push\":false,\"i\":\"1409143565856\",\"hm\":\"second :115\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143681,\"push\":false,\"i\":\"1409143565857\",\"hm\":\"second :116\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143682,\"push\":false,\"i\":\"1409143565858\",\"hm\":\"second :117\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143683,\"push\":false,\"i\":\"1409143565859\",\"hm\":\"second :118\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143684,\"push\":false,\"i\":\"1409143565860\",\"hm\":\"second :119\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143685,\"push\":false,\"i\":\"1409143565861\",\"hm\":\"second :120\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143686,\"push\":false,\"i\":\"1409143565862\",\"hm\":\"second :121\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143687,\"push\":false,\"i\":\"1409143565863\",\"hm\":\"second :122\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143688,\"push\":false,\"i\":\"1409143565864\",\"hm\":\"second :123\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143689,\"push\":false,\"i\":\"1409143565865\",\"hm\":\"second :124\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143690,\"push\":false,\"i\":\"1409143565866\",\"hm\":\"second :125\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143691,\"push\":false,\"i\":\"1409143565867\",\"hm\":\"second :126\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143692,\"push\":false,\"i\":\"1409143565868\",\"hm\":\"second :127\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143693,\"push\":false,\"i\":\"1409143565869\",\"hm\":\"second :128\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143694,\"push\":false,\"i\":\"1409143565870\",\"hm\":\"second :129\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143695,\"push\":false,\"i\":\"1409143565871\",\"hm\":\"second :130\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143696,\"push\":false,\"i\":\"1409143565872\",\"hm\":\"second :131\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143697,\"push\":false,\"i\":\"1409143565873\",\"hm\":\"second :132\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143698,\"push\":false,\"i\":\"1409143565874\",\"hm\":\"second :133\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143699,\"push\":false,\"i\":\"1409143565875\",\"hm\":\"second :134\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143700,\"push\":false,\"i\":\"1409143565876\",\"hm\":\"second :135\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143701,\"push\":false,\"i\":\"1409143565877\",\"hm\":\"second :136\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143702,\"push\":false,\"i\":\"1409143565878\",\"hm\":\"second :137\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143703,\"push\":false,\"i\":\"1409143565879\",\"hm\":\"second :138\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143704,\"push\":false,\"i\":\"1409143565880\",\"hm\":\"second :139\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143705,\"push\":false,\"i\":\"1409143565881\",\"hm\":\"second :140\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143706,\"push\":false,\"i\":\"1409143565882\",\"hm\":\"second :141\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143707,\"push\":false,\"i\":\"1409143565883\",\"hm\":\"second :142\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143708,\"push\":false,\"i\":\"1409143565884\",\"hm\":\"second :143\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143709,\"push\":false,\"i\":\"1409143565885\",\"hm\":\"second :144\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143710,\"push\":false,\"i\":\"1409143565886\",\"hm\":\"second :145\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143711,\"push\":false,\"i\":\"1409143565887\",\"hm\":\"second :146\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143712,\"push\":false,\"i\":\"1409143565888\",\"hm\":\"second :147\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143713,\"push\":false,\"i\":\"1409143565889\",\"hm\":\"second :148\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143714,\"push\":false,\"i\":\"1409143565890\",\"hm\":\"second :149\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143715,\"push\":false,\"i\":\"1409143565891\",\"hm\":\"second :150\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143716,\"push\":false,\"i\":\"1409143565892\",\"hm\":\"second :151\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143717,\"push\":false,\"i\":\"1409143565893\",\"hm\":\"second :152\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143718,\"push\":false,\"i\":\"1409143565894\",\"hm\":\"second :153\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143719,\"push\":false,\"i\":\"1409143565895\",\"hm\":\"second :154\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143720,\"push\":false,\"i\":\"1409143565896\",\"hm\":\"second :155\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143721,\"push\":false,\"i\":\"1409143565897\",\"hm\":\"second :156\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143722,\"push\":false,\"i\":\"1409143565898\",\"hm\":\"second :157\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143723,\"push\":false,\"i\":\"1409143565899\",\"hm\":\"second :158\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143724,\"push\":false,\"i\":\"1409143565900\",\"hm\":\"second :159\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143725,\"push\":false,\"i\":\"1409143565901\",\"hm\":\"second :160\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143726,\"push\":false,\"i\":\"1409143565902\",\"hm\":\"second :161\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143727,\"push\":false,\"i\":\"1409143565903\",\"hm\":\"second :162\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143728,\"push\":false,\"i\":\"1409143565904\",\"hm\":\"second :163\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143729,\"push\":false,\"i\":\"1409143565905\",\"hm\":\"second :164\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143730,\"push\":false,\"i\":\"1409143565906\",\"hm\":\"second :165\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143731,\"push\":false,\"i\":\"1409143565907\",\"hm\":\"second :166\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143732,\"push\":false,\"i\":\"1409143565908\",\"hm\":\"second :167\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143733,\"push\":false,\"i\":\"1409143565909\",\"hm\":\"second :168\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143734,\"push\":false,\"i\":\"1409143565910\",\"hm\":\"second :169\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143735,\"push\":false,\"i\":\"1409143565911\",\"hm\":\"second :170\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143736,\"push\":false,\"i\":\"1409143565912\",\"hm\":\"second :171\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143737,\"push\":false,\"i\":\"1409143565913\",\"hm\":\"second :172\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143738,\"push\":false,\"i\":\"1409143565914\",\"hm\":\"second :173\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143739,\"push\":false,\"i\":\"1409143565915\",\"hm\":\"second :174\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143740,\"push\":false,\"i\":\"1409143565916\",\"hm\":\"second :175\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143741,\"push\":false,\"i\":\"1409143565917\",\"hm\":\"second :176\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143742,\"push\":false,\"i\":\"1409143565918\",\"hm\":\"second :177\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143743,\"push\":false,\"i\":\"1409143565919\",\"hm\":\"second :178\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143744,\"push\":false,\"i\":\"1409143565920\",\"hm\":\"second :179\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143745,\"push\":false,\"i\":\"1409143565921\",\"hm\":\"second :180\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143746,\"push\":false,\"i\":\"1409143565922\",\"hm\":\"second :181\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143747,\"push\":false,\"i\":\"1409143565923\",\"hm\":\"second :182\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143748,\"push\":false,\"i\":\"1409143565924\",\"hm\":\"second :183\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143749,\"push\":false,\"i\":\"1409143565925\",\"hm\":\"second :184\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143751,\"push\":false,\"i\":\"1409143565926\",\"hm\":\"second :185\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143752,\"push\":false,\"i\":\"1409143565927\",\"hm\":\"second :186\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143753,\"push\":false,\"i\":\"1409143565928\",\"hm\":\"second :187\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143754,\"push\":false,\"i\":\"1409143565929\",\"hm\":\"second :188\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143755,\"push\":false,\"i\":\"1409143565930\",\"hm\":\"second :189\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143756,\"push\":false,\"i\":\"1409143565931\",\"hm\":\"second :190\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143757,\"push\":false,\"i\":\"1409143565932\",\"hm\":\"second :191\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143758,\"push\":false,\"i\":\"1409143565933\",\"hm\":\"second :192\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143759,\"push\":false,\"i\":\"1409143565934\",\"hm\":\"second :193\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143760,\"push\":false,\"i\":\"1409143565935\",\"hm\":\"second :194\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143761,\"push\":false,\"i\":\"1409143565936\",\"hm\":\"second :195\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143762,\"push\":false,\"i\":\"1409143565937\",\"hm\":\"second :196\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143763,\"push\":false,\"i\":\"1409143565938\",\"hm\":\"second :197\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143764,\"push\":false,\"i\":\"1409143565939\",\"hm\":\"second :198\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143765,\"push\":false,\"i\":\"1409143565940\",\"hm\":\"second :199\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143766,\"push\":false,\"i\":\"1409143565941\",\"hm\":\"second :200\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143767,\"push\":false,\"i\":\"1409143565942\",\"hm\":\"second :201\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143768,\"push\":false,\"i\":\"1409143565943\",\"hm\":\"second :202\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143769,\"push\":false,\"i\":\"1409143565944\",\"hm\":\"second :203\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143770,\"push\":false,\"i\":\"1409143565945\",\"hm\":\"second :204\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143771,\"push\":false,\"i\":\"1409143565946\",\"hm\":\"second :205\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143772,\"push\":false,\"i\":\"1409143565947\",\"hm\":\"second :206\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143773,\"push\":false,\"i\":\"1409143565948\",\"hm\":\"second :207\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143774,\"push\":false,\"i\":\"1409143565949\",\"hm\":\"second :208\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143775,\"push\":false,\"i\":\"1409143565950\",\"hm\":\"second :209\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143776,\"push\":false,\"i\":\"1409143565951\",\"hm\":\"second :210\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143777,\"push\":false,\"i\":\"1409143565952\",\"hm\":\"second :211\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143778,\"push\":false,\"i\":\"1409143565953\",\"hm\":\"second :212\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143779,\"push\":false,\"i\":\"1409143565954\",\"hm\":\"second :213\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143780,\"push\":false,\"i\":\"1409143565955\",\"hm\":\"second :214\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143781,\"push\":false,\"i\":\"1409143565956\",\"hm\":\"second :215\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143782,\"push\":false,\"i\":\"1409143565957\",\"hm\":\"second :216\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143783,\"push\":false,\"i\":\"1409143565958\",\"hm\":\"second :217\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143784,\"push\":false,\"i\":\"1409143565959\",\"hm\":\"second :218\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143785,\"push\":false,\"i\":\"1409143565960\",\"hm\":\"second :219\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143786,\"push\":false,\"i\":\"1409143565961\",\"hm\":\"second :220\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143787,\"push\":false,\"i\":\"1409143565962\",\"hm\":\"second :221\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143788,\"push\":false,\"i\":\"1409143565963\",\"hm\":\"second :222\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143789,\"push\":false,\"i\":\"1409143565964\",\"hm\":\"second :223\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143790,\"push\":false,\"i\":\"1409143565965\",\"hm\":\"second :224\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143791,\"push\":false,\"i\":\"1409143565966\",\"hm\":\"second :225\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143792,\"push\":false,\"i\":\"1409143565967\",\"hm\":\"second :226\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143793,\"push\":false,\"i\":\"1409143565968\",\"hm\":\"second :227\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143794,\"push\":false,\"i\":\"1409143565969\",\"hm\":\"second :228\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143795,\"push\":false,\"i\":\"1409143565970\",\"hm\":\"second :229\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143796,\"push\":false,\"i\":\"1409143565971\",\"hm\":\"second :230\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143797,\"push\":false,\"i\":\"1409143565972\",\"hm\":\"second :231\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143798,\"push\":false,\"i\":\"1409143565973\",\"hm\":\"second :232\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143799,\"push\":false,\"i\":\"1409143565974\",\"hm\":\"second :233\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143800,\"push\":false,\"i\":\"1409143565975\",\"hm\":\"second :234\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143801,\"push\":false,\"i\":\"1409143565976\",\"hm\":\"second :235\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143802,\"push\":false,\"i\":\"1409143565977\",\"hm\":\"second :236\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143803,\"push\":false,\"i\":\"1409143565978\",\"hm\":\"second :237\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143804,\"push\":false,\"i\":\"1409143565979\",\"hm\":\"second :238\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143805,\"push\":false,\"i\":\"1409143565980\",\"hm\":\"second :239\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143806,\"push\":false,\"i\":\"1409143565981\",\"hm\":\"second :240\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143807,\"push\":false,\"i\":\"1409143565982\",\"hm\":\"second :241\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143808,\"push\":false,\"i\":\"1409143565983\",\"hm\":\"second :242\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143809,\"push\":false,\"i\":\"1409143565984\",\"hm\":\"second :243\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143810,\"push\":false,\"i\":\"1409143565985\",\"hm\":\"second :244\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143811,\"push\":false,\"i\":\"1409143565986\",\"hm\":\"second :245\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143812,\"push\":false,\"i\":\"1409143565987\",\"hm\":\"second :246\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143813,\"push\":false,\"i\":\"1409143565988\",\"hm\":\"second :247\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143814,\"push\":false,\"i\":\"1409143565989\",\"hm\":\"second :248\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143815,\"push\":false,\"i\":\"1409143565990\",\"hm\":\"second :249\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143816,\"push\":false,\"i\":\"1409143565991\",\"hm\":\"second :250\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143817,\"push\":false,\"i\":\"1409143565992\",\"hm\":\"second :251\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143818,\"push\":false,\"i\":\"1409143565993\",\"hm\":\"second :252\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143819,\"push\":false,\"i\":\"1409143565994\",\"hm\":\"second :253\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143820,\"push\":false,\"i\":\"1409143565995\",\"hm\":\"second :254\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143821,\"push\":false,\"i\":\"1409143565996\",\"hm\":\"second :255\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143822,\"push\":false,\"i\":\"1409143565997\",\"hm\":\"second :256\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143823,\"push\":false,\"i\":\"1409143565998\",\"hm\":\"second :257\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143824,\"push\":false,\"i\":\"1409143565999\",\"hm\":\"second :258\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143825,\"push\":false,\"i\":\"1409143566000\",\"hm\":\"second :259\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143826,\"push\":false,\"i\":\"1409143566001\",\"hm\":\"second :260\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143827,\"push\":false,\"i\":\"1409143566002\",\"hm\":\"second :261\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143828,\"push\":false,\"i\":\"1409143566003\",\"hm\":\"second :262\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143829,\"push\":false,\"i\":\"1409143566004\",\"hm\":\"second :263\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143830,\"push\":false,\"i\":\"1409143566005\",\"hm\":\"second :264\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143831,\"push\":false,\"i\":\"1409143566006\",\"hm\":\"second :265\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143832,\"push\":false,\"i\":\"1409143566007\",\"hm\":\"second :266\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143833,\"push\":false,\"i\":\"1409143566008\",\"hm\":\"second :267\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143834,\"push\":false,\"i\":\"1409143566009\",\"hm\":\"second :268\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143835,\"push\":false,\"i\":\"1409143566010\",\"hm\":\"second :269\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143836,\"push\":false,\"i\":\"1409143566011\",\"hm\":\"second :270\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143837,\"push\":false,\"i\":\"1409143566012\",\"hm\":\"second :271\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143838,\"push\":false,\"i\":\"1409143566013\",\"hm\":\"second :272\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143839,\"push\":false,\"i\":\"1409143566014\",\"hm\":\"second :273\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143840,\"push\":false,\"i\":\"1409143566015\",\"hm\":\"second :274\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143841,\"push\":false,\"i\":\"1409143566016\",\"hm\":\"second :275\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143842,\"push\":false,\"i\":\"1409143566017\",\"hm\":\"second :276\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143843,\"push\":false,\"i\":\"1409143566018\",\"hm\":\"second :277\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143844,\"push\":false,\"i\":\"1409143566019\",\"hm\":\"second :278\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143845,\"push\":false,\"i\":\"1409143566020\",\"hm\":\"second :279\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143846,\"push\":false,\"i\":\"1409143566021\",\"hm\":\"second :280\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143847,\"push\":false,\"i\":\"1409143566022\",\"hm\":\"second :281\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143848,\"push\":false,\"i\":\"1409143566023\",\"hm\":\"second :282\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143849,\"push\":false,\"i\":\"1409143566024\",\"hm\":\"second :283\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143850,\"push\":false,\"i\":\"1409143566025\",\"hm\":\"second :284\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143851,\"push\":false,\"i\":\"1409143566026\",\"hm\":\"second :285\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143852,\"push\":false,\"i\":\"1409143566027\",\"hm\":\"second :286\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143853,\"push\":false,\"i\":\"1409143566028\",\"hm\":\"second :287\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143854,\"push\":false,\"i\":\"1409143566029\",\"hm\":\"second :288\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143855,\"push\":false,\"i\":\"1409143566030\",\"hm\":\"second :289\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143856,\"push\":false,\"i\":\"1409143566031\",\"hm\":\"second :290\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143857,\"push\":false,\"i\":\"1409143566032\",\"hm\":\"second :291\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143858,\"push\":false,\"i\":\"1409143566033\",\"hm\":\"second :292\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143859,\"push\":false,\"i\":\"1409143566034\",\"hm\":\"second :293\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143860,\"push\":false,\"i\":\"1409143566035\",\"hm\":\"second :294\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143861,\"push\":false,\"i\":\"1409143566036\",\"hm\":\"second :295\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143862,\"push\":false,\"i\":\"1409143566037\",\"hm\":\"second :296\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143863,\"push\":false,\"i\":\"1409143566038\",\"hm\":\"second :297\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143864,\"push\":false,\"i\":\"1409143566039\",\"hm\":\"second :298\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143865,\"push\":false,\"i\":\"1409143566040\",\"hm\":\"second :299\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143866,\"push\":false,\"i\":\"1409143566041\",\"hm\":\"second :300\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143867,\"push\":false,\"i\":\"1409143566042\",\"hm\":\"second :301\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143868,\"push\":false,\"i\":\"1409143566043\",\"hm\":\"second :302\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143869,\"push\":false,\"i\":\"1409143566044\",\"hm\":\"second :303\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143870,\"push\":false,\"i\":\"1409143566045\",\"hm\":\"second :304\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143871,\"push\":false,\"i\":\"1409143566046\",\"hm\":\"second :305\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143872,\"push\":false,\"i\":\"1409143566047\",\"hm\":\"second :306\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143873,\"push\":false,\"i\":\"1409143566048\",\"hm\":\"second :307\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143874,\"push\":false,\"i\":\"1409143566049\",\"hm\":\"second :308\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143875,\"push\":false,\"i\":\"1409143566050\",\"hm\":\"second :309\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143876,\"push\":false,\"i\":\"1409143566051\",\"hm\":\"second :310\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143877,\"push\":false,\"i\":\"1409143566052\",\"hm\":\"second :311\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143878,\"push\":false,\"i\":\"1409143566053\",\"hm\":\"second :312\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143879,\"push\":false,\"i\":\"1409143566054\",\"hm\":\"second :313\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143880,\"push\":false,\"i\":\"1409143566055\",\"hm\":\"second :314\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143881,\"push\":false,\"i\":\"1409143566056\",\"hm\":\"second :315\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143882,\"push\":false,\"i\":\"1409143566057\",\"hm\":\"second :316\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143883,\"push\":false,\"i\":\"1409143566058\",\"hm\":\"second :317\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143884,\"push\":false,\"i\":\"1409143566059\",\"hm\":\"second :318\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143885,\"push\":false,\"i\":\"1409143566060\",\"hm\":\"second :319\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143886,\"push\":false,\"i\":\"1409143566061\",\"hm\":\"second :320\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143887,\"push\":false,\"i\":\"1409143566062\",\"hm\":\"second :321\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143888,\"push\":false,\"i\":\"1409143566063\",\"hm\":\"second :322\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143889,\"push\":false,\"i\":\"1409143566064\",\"hm\":\"second :323\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143890,\"push\":false,\"i\":\"1409143566065\",\"hm\":\"second :324\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143891,\"push\":false,\"i\":\"1409143566066\",\"hm\":\"second :325\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143892,\"push\":false,\"i\":\"1409143566067\",\"hm\":\"second :326\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143893,\"push\":false,\"i\":\"1409143566068\",\"hm\":\"second :327\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143894,\"push\":false,\"i\":\"1409143566069\",\"hm\":\"second :328\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143895,\"push\":false,\"i\":\"1409143566070\",\"hm\":\"second :329\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143896,\"push\":false,\"i\":\"1409143566071\",\"hm\":\"second :330\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143897,\"push\":false,\"i\":\"1409143566072\",\"hm\":\"second :331\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143898,\"push\":false,\"i\":\"1409143566073\",\"hm\":\"second :332\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143899,\"push\":false,\"i\":\"1409143566074\",\"hm\":\"second :333\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143900,\"push\":false,\"i\":\"1409143566075\",\"hm\":\"second :334\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143902,\"push\":false,\"i\":\"1409143566076\",\"hm\":\"second :335\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143903,\"push\":false,\"i\":\"1409143566077\",\"hm\":\"second :336\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143904,\"push\":false,\"i\":\"1409143566078\",\"hm\":\"second :337\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143905,\"push\":false,\"i\":\"1409143566079\",\"hm\":\"second :338\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143906,\"push\":false,\"i\":\"1409143566080\",\"hm\":\"second :339\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143907,\"push\":false,\"i\":\"1409143566081\",\"hm\":\"second :340\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143908,\"push\":false,\"i\":\"1409143566082\",\"hm\":\"second :341\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143909,\"push\":false,\"i\":\"1409143566083\",\"hm\":\"second :342\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143910,\"push\":false,\"i\":\"1409143566084\",\"hm\":\"second :343\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143911,\"push\":false,\"i\":\"1409143566085\",\"hm\":\"second :344\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143912,\"push\":false,\"i\":\"1409143566086\",\"hm\":\"second :345\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143913,\"push\":false,\"i\":\"1409143566087\",\"hm\":\"second :346\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143914,\"push\":false,\"i\":\"1409143566088\",\"hm\":\"second :347\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143915,\"push\":false,\"i\":\"1409143566089\",\"hm\":\"second :348\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143916,\"push\":false,\"i\":\"1409143566090\",\"hm\":\"second :349\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143917,\"push\":false,\"i\":\"1409143566091\",\"hm\":\"second :350\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143918,\"push\":false,\"i\":\"1409143566092\",\"hm\":\"second :351\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143919,\"push\":false,\"i\":\"1409143566093\",\"hm\":\"second :352\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143920,\"push\":false,\"i\":\"1409143566094\",\"hm\":\"second :353\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143921,\"push\":false,\"i\":\"1409143566095\",\"hm\":\"second :354\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143922,\"push\":false,\"i\":\"1409143566096\",\"hm\":\"second :355\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143923,\"push\":false,\"i\":\"1409143566097\",\"hm\":\"second :356\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143924,\"push\":false,\"i\":\"1409143566098\",\"hm\":\"second :357\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143925,\"push\":false,\"i\":\"1409143566099\",\"hm\":\"second :358\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143926,\"push\":false,\"i\":\"1409143566100\",\"hm\":\"second :359\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143927,\"push\":false,\"i\":\"1409143566101\",\"hm\":\"second :360\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143928,\"push\":false,\"i\":\"1409143566102\",\"hm\":\"second :361\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143929,\"push\":false,\"i\":\"1409143566103\",\"hm\":\"second :362\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143930,\"push\":false,\"i\":\"1409143566104\",\"hm\":\"second :363\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143931,\"push\":false,\"i\":\"1409143566105\",\"hm\":\"second :364\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143932,\"push\":false,\"i\":\"1409143566106\",\"hm\":\"second :365\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143933,\"push\":false,\"i\":\"1409143566107\",\"hm\":\"second :366\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143934,\"push\":false,\"i\":\"1409143566108\",\"hm\":\"second :367\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143935,\"push\":false,\"i\":\"1409143566109\",\"hm\":\"second :368\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143936,\"push\":false,\"i\":\"1409143566110\",\"hm\":\"second :369\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143937,\"push\":false,\"i\":\"1409143566111\",\"hm\":\"second :370\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143938,\"push\":false,\"i\":\"1409143566112\",\"hm\":\"second :371\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143939,\"push\":false,\"i\":\"1409143566113\",\"hm\":\"second :372\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143940,\"push\":false,\"i\":\"1409143566114\",\"hm\":\"second :373\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143941,\"push\":false,\"i\":\"1409143566115\",\"hm\":\"second :374\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143942,\"push\":false,\"i\":\"1409143566116\",\"hm\":\"second :375\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143943,\"push\":false,\"i\":\"1409143566117\",\"hm\":\"second :376\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143944,\"push\":false,\"i\":\"1409143566118\",\"hm\":\"second :377\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143945,\"push\":false,\"i\":\"1409143566119\",\"hm\":\"second :378\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143946,\"push\":false,\"i\":\"1409143566120\",\"hm\":\"second :379\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143947,\"push\":false,\"i\":\"1409143566121\",\"hm\":\"second :380\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143948,\"push\":false,\"i\":\"1409143566122\",\"hm\":\"second :381\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143949,\"push\":false,\"i\":\"1409143566123\",\"hm\":\"second :382\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143950,\"push\":false,\"i\":\"1409143566124\",\"hm\":\"second :383\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143951,\"push\":false,\"i\":\"1409143566125\",\"hm\":\"second :384\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143952,\"push\":false,\"i\":\"1409143566126\",\"hm\":\"second :385\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143953,\"push\":false,\"i\":\"1409143566127\",\"hm\":\"second :386\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143954,\"push\":false,\"i\":\"1409143566128\",\"hm\":\"second :387\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143955,\"push\":false,\"i\":\"1409143566129\",\"hm\":\"second :388\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143956,\"push\":false,\"i\":\"1409143566130\",\"hm\":\"second :389\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143957,\"push\":false,\"i\":\"1409143566131\",\"hm\":\"second :390\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143958,\"push\":false,\"i\":\"1409143566132\",\"hm\":\"second :391\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143959,\"push\":false,\"i\":\"1409143566133\",\"hm\":\"second :392\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143960,\"push\":false,\"i\":\"1409143566134\",\"hm\":\"second :393\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143961,\"push\":false,\"i\":\"1409143566135\",\"hm\":\"second :394\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143962,\"push\":false,\"i\":\"1409143566136\",\"hm\":\"second :395\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143963,\"push\":false,\"i\":\"1409143566137\",\"hm\":\"second :396\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143964,\"push\":false,\"i\":\"1409143566138\",\"hm\":\"second :397\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143965,\"push\":false,\"i\":\"1409143566139\",\"hm\":\"second :398\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143966,\"push\":false,\"i\":\"1409143566140\",\"hm\":\"second :399\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143967,\"push\":false,\"i\":\"1409143566141\",\"hm\":\"second :400\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143968,\"push\":false,\"i\":\"1409143566142\",\"hm\":\"second :401\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143969,\"push\":false,\"i\":\"1409143566143\",\"hm\":\"second :402\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143970,\"push\":false,\"i\":\"1409143566144\",\"hm\":\"second :403\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143971,\"push\":false,\"i\":\"1409143566145\",\"hm\":\"second :404\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143972,\"push\":false,\"i\":\"1409143566146\",\"hm\":\"second :405\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143973,\"push\":false,\"i\":\"1409143566147\",\"hm\":\"second :406\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143974,\"push\":false,\"i\":\"1409143566148\",\"hm\":\"second :407\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143975,\"push\":false,\"i\":\"1409143566149\",\"hm\":\"second :408\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143976,\"push\":false,\"i\":\"1409143566150\",\"hm\":\"second :409\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143977,\"push\":false,\"i\":\"1409143566151\",\"hm\":\"second :410\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143978,\"push\":false,\"i\":\"1409143566152\",\"hm\":\"second :411\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143979,\"push\":false,\"i\":\"1409143566153\",\"hm\":\"second :412\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143980,\"push\":false,\"i\":\"1409143566154\",\"hm\":\"second :413\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143981,\"push\":false,\"i\":\"1409143566155\",\"hm\":\"second :414\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143982,\"push\":false,\"i\":\"1409143566156\",\"hm\":\"second :415\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143983,\"push\":false,\"i\":\"1409143566157\",\"hm\":\"second :416\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143984,\"push\":false,\"i\":\"1409143566158\",\"hm\":\"second :417\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143985,\"push\":false,\"i\":\"1409143566159\",\"hm\":\"second :418\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143986,\"push\":false,\"i\":\"1409143566160\",\"hm\":\"second :419\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143987,\"push\":false,\"i\":\"1409143566161\",\"hm\":\"second :420\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143988,\"push\":false,\"i\":\"1409143566162\",\"hm\":\"second :421\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143989,\"push\":false,\"i\":\"1409143566163\",\"hm\":\"second :422\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143990,\"push\":false,\"i\":\"1409143566164\",\"hm\":\"second :423\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143991,\"push\":false,\"i\":\"1409143566165\",\"hm\":\"second :424\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143992,\"push\":false,\"i\":\"1409143566166\",\"hm\":\"second :425\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143993,\"push\":false,\"i\":\"1409143566167\",\"hm\":\"second :426\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143994,\"push\":false,\"i\":\"1409143566168\",\"hm\":\"second :427\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143995,\"push\":false,\"i\":\"1409143566169\",\"hm\":\"second :428\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143996,\"push\":false,\"i\":\"1409143566170\",\"hm\":\"second :429\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143997,\"push\":false,\"i\":\"1409143566171\",\"hm\":\"second :430\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143998,\"push\":false,\"i\":\"1409143566172\",\"hm\":\"second :431\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409143999,\"push\":false,\"i\":\"1409143566173\",\"hm\":\"second :432\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144000,\"push\":false,\"i\":\"1409143566174\",\"hm\":\"second :433\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144001,\"push\":false,\"i\":\"1409143566175\",\"hm\":\"second :434\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144002,\"push\":false,\"i\":\"1409143566176\",\"hm\":\"second :435\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144003,\"push\":false,\"i\":\"1409143566177\",\"hm\":\"second :436\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144004,\"push\":false,\"i\":\"1409143566178\",\"hm\":\"second :437\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144005,\"push\":false,\"i\":\"1409143566179\",\"hm\":\"second :438\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144006,\"push\":false,\"i\":\"1409143566180\",\"hm\":\"second :439\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144007,\"push\":false,\"i\":\"1409143566181\",\"hm\":\"second :440\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144008,\"push\":false,\"i\":\"1409143566182\",\"hm\":\"second :441\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144009,\"push\":false,\"i\":\"1409143566183\",\"hm\":\"second :442\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144010,\"push\":false,\"i\":\"1409143566184\",\"hm\":\"second :443\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144011,\"push\":false,\"i\":\"1409143566185\",\"hm\":\"second :444\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144012,\"push\":false,\"i\":\"1409143566186\",\"hm\":\"second :445\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144013,\"push\":false,\"i\":\"1409143566187\",\"hm\":\"second :446\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144014,\"push\":false,\"i\":\"1409143566188\",\"hm\":\"second :447\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144015,\"push\":false,\"i\":\"1409143566189\",\"hm\":\"second :448\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144016,\"push\":false,\"i\":\"1409143566190\",\"hm\":\"second :449\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144017,\"push\":false,\"i\":\"1409143566191\",\"hm\":\"second :450\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144018,\"push\":false,\"i\":\"1409143566192\",\"hm\":\"second :451\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144019,\"push\":false,\"i\":\"1409143566193\",\"hm\":\"second :452\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144020,\"push\":false,\"i\":\"1409143566194\",\"hm\":\"second :453\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144021,\"push\":false,\"i\":\"1409143566195\",\"hm\":\"second :454\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144022,\"push\":false,\"i\":\"1409143566196\",\"hm\":\"second :455\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409144023,\"push\":false,\"i\":\"1409143566197\",\"hm\":\"second :456\"},\"t\":\"m\"}]},\"t\":\"bm\",\"ts\":1409144024}";
            //40
            //msg = "{\"d\":{\"msgs\":[{\"f\":\"+919900000000\",\"d\":{\"ts\":1409071921,\"push\":false,\"i\":\"3409071921220\",\"hm\":\"tester :1\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409071922,\"push\":false,\"i\":\"1409071921221\",\"hm\":\"tester :2\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409071923,\"push\":false,\"i\":\"1409071921222\",\"hm\":\"tester :3\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409071924,\"push\":false,\"i\":\"1409071921223\",\"hm\":\"tester :4\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409071925,\"push\":false,\"i\":\"1409071921224\",\"hm\":\"tester :5\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409071926,\"push\":false,\"i\":\"1409071921225\",\"hm\":\"tester :6\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409071927,\"push\":false,\"i\":\"1409071921226\",\"hm\":\"tester :7\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409071928,\"push\":false,\"i\":\"1409071921227\",\"hm\":\"tester :8\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409071929,\"push\":false,\"i\":\"1409071921228\",\"hm\":\"tester :9\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409071930,\"push\":false,\"i\":\"1409071921229\",\"hm\":\"tester :10\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409071931,\"push\":false,\"i\":\"1409071921230\",\"hm\":\"tester :11\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409071932,\"push\":false,\"i\":\"1409071921231\",\"hm\":\"tester :12\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409071933,\"push\":false,\"i\":\"1409071921232\",\"hm\":\"tester :13\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409071934,\"push\":false,\"i\":\"1409071921233\",\"hm\":\"tester :14\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409071935,\"push\":false,\"i\":\"1409071921234\",\"hm\":\"tester :15\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409071936,\"push\":false,\"i\":\"1409071921235\",\"hm\":\"tester :16\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409071937,\"push\":false,\"i\":\"1409071921236\",\"hm\":\"tester :17\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409071938,\"push\":false,\"i\":\"1409071921237\",\"hm\":\"tester :18\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409071939,\"push\":false,\"i\":\"1409071921238\",\"hm\":\"tester :19\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409071940,\"push\":false,\"i\":\"1409071921239\",\"hm\":\"tester :20\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409071941,\"push\":false,\"i\":\"1409071921220\",\"hm\":\"tester :1\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409071942,\"push\":false,\"i\":\"1409071921221\",\"hm\":\"tester :2\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409071943,\"push\":false,\"i\":\"1409071921222\",\"hm\":\"tester :3\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409071944,\"push\":false,\"i\":\"1409071921223\",\"hm\":\"tester :4\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409071945,\"push\":false,\"i\":\"1409071921224\",\"hm\":\"tester :5\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409071946,\"push\":false,\"i\":\"1409071921225\",\"hm\":\"tester :6\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409071947,\"push\":false,\"i\":\"1409071921226\",\"hm\":\"tester :7\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409071948,\"push\":false,\"i\":\"1409071921227\",\"hm\":\"tester :8\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409071949,\"push\":false,\"i\":\"1409071921228\",\"hm\":\"tester :9\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409071950,\"push\":false,\"i\":\"1409071921229\",\"hm\":\"tester :10\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409071951,\"push\":false,\"i\":\"1409071921230\",\"hm\":\"tester :11\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409071952,\"push\":false,\"i\":\"1409071921231\",\"hm\":\"tester :12\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409071953,\"push\":false,\"i\":\"1409071921232\",\"hm\":\"tester :13\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409071954,\"push\":false,\"i\":\"1409071921233\",\"hm\":\"tester :14\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409071955,\"push\":false,\"i\":\"1409071921234\",\"hm\":\"tester :15\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409071956,\"push\":false,\"i\":\"1409071921235\",\"hm\":\"tester :16\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409071957,\"push\":false,\"i\":\"1409071921236\",\"hm\":\"tester :17\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409071958,\"push\":false,\"i\":\"1409071921237\",\"hm\":\"tester :18\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409071959,\"push\":false,\"i\":\"1409071921238\",\"hm\":\"tester :19\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409071960,\"push\":false,\"i\":\"1409071921239\",\"hm\":\"tester :20\"},\"t\":\"m\"}]},\"t\":\"bm\",\"ts\":1409072018}";
            //100
            //msg = "{\"d\":{\"msgs\":[{\"f\":\"+919900000000\",\"d\":{\"ts\":1409074901,\"push\":false,\"i\":\"1409074901789\",\"hm\":\"tester :1\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409074902,\"push\":false,\"i\":\"1409074901790\",\"hm\":\"tester :2\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409074903,\"push\":false,\"i\":\"1409074901791\",\"hm\":\"tester :3\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409074904,\"push\":false,\"i\":\"1409074901792\",\"hm\":\"tester :4\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409074905,\"push\":false,\"i\":\"1409074901793\",\"hm\":\"tester :5\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409074906,\"push\":false,\"i\":\"1409074901794\",\"hm\":\"tester :6\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409074907,\"push\":false,\"i\":\"1409074901795\",\"hm\":\"tester :7\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409074908,\"push\":false,\"i\":\"1409074901796\",\"hm\":\"tester :8\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409074909,\"push\":false,\"i\":\"1409074901797\",\"hm\":\"tester :9\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409074910,\"push\":false,\"i\":\"1409074901798\",\"hm\":\"tester :10\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409074911,\"push\":false,\"i\":\"1409074901799\",\"hm\":\"tester :11\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409074912,\"push\":false,\"i\":\"1409074901800\",\"hm\":\"tester :12\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409074913,\"push\":false,\"i\":\"1409074901801\",\"hm\":\"tester :13\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409074914,\"push\":false,\"i\":\"1409074901802\",\"hm\":\"tester :14\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409074915,\"push\":false,\"i\":\"1409074901803\",\"hm\":\"tester :15\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409074916,\"push\":false,\"i\":\"1409074901804\",\"hm\":\"tester :16\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409074917,\"push\":false,\"i\":\"1409074901805\",\"hm\":\"tester :17\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409074918,\"push\":false,\"i\":\"1409074901806\",\"hm\":\"tester :18\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409074919,\"push\":false,\"i\":\"1409074901807\",\"hm\":\"tester :19\"},\"t\":\"m\"},{\"f\":\"+919900000000\",\"d\":{\"ts\":1409074920,\"push\":false,\"i\":\"1409074901808\",\"hm\":\"tester :20\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409074921,\"push\":false,\"i\":\"1409074901789\",\"hm\":\"tester :1\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409074922,\"push\":false,\"i\":\"1409074901790\",\"hm\":\"tester :2\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409074923,\"push\":false,\"i\":\"1409074901791\",\"hm\":\"tester :3\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409074924,\"push\":false,\"i\":\"1409074901792\",\"hm\":\"tester :4\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409074925,\"push\":false,\"i\":\"1409074901793\",\"hm\":\"tester :5\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409074926,\"push\":false,\"i\":\"1409074901794\",\"hm\":\"tester :6\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409074927,\"push\":false,\"i\":\"1409074901795\",\"hm\":\"tester :7\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409074928,\"push\":false,\"i\":\"1409074901796\",\"hm\":\"tester :8\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409074929,\"push\":false,\"i\":\"1409074901797\",\"hm\":\"tester :9\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409074930,\"push\":false,\"i\":\"1409074901798\",\"hm\":\"tester :10\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409074931,\"push\":false,\"i\":\"1409074901799\",\"hm\":\"tester :11\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409074932,\"push\":false,\"i\":\"1409074901800\",\"hm\":\"tester :12\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409074933,\"push\":false,\"i\":\"1409074901801\",\"hm\":\"tester :13\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409074934,\"push\":false,\"i\":\"1409074901802\",\"hm\":\"tester :14\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409074936,\"push\":false,\"i\":\"1409074901803\",\"hm\":\"tester :15\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409074937,\"push\":false,\"i\":\"1409074901804\",\"hm\":\"tester :16\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409074938,\"push\":false,\"i\":\"1409074901805\",\"hm\":\"tester :17\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409074939,\"push\":false,\"i\":\"1409074901806\",\"hm\":\"tester :18\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409074940,\"push\":false,\"i\":\"1409074901807\",\"hm\":\"tester :19\"},\"t\":\"m\"},{\"f\":\"+919900000001\",\"d\":{\"ts\":1409074941,\"push\":false,\"i\":\"1409074901808\",\"hm\":\"tester :20\"},\"t\":\"m\"},{\"f\":\"+919900000002\",\"d\":{\"ts\":1409074942,\"push\":false,\"i\":\"1409074901789\",\"hm\":\"tester :1\"},\"t\":\"m\"},{\"f\":\"+919900000002\",\"d\":{\"ts\":1409074943,\"push\":false,\"i\":\"1409074901790\",\"hm\":\"tester :2\"},\"t\":\"m\"},{\"f\":\"+919900000002\",\"d\":{\"ts\":1409074944,\"push\":false,\"i\":\"1409074901791\",\"hm\":\"tester :3\"},\"t\":\"m\"},{\"f\":\"+919900000002\",\"d\":{\"ts\":1409074945,\"push\":false,\"i\":\"1409074901792\",\"hm\":\"tester :4\"},\"t\":\"m\"},{\"f\":\"+919900000002\",\"d\":{\"ts\":1409074946,\"push\":false,\"i\":\"1409074901793\",\"hm\":\"tester :5\"},\"t\":\"m\"},{\"f\":\"+919900000002\",\"d\":{\"ts\":1409074947,\"push\":false,\"i\":\"1409074901794\",\"hm\":\"tester :6\"},\"t\":\"m\"},{\"f\":\"+919900000002\",\"d\":{\"ts\":1409074948,\"push\":false,\"i\":\"1409074901795\",\"hm\":\"tester :7\"},\"t\":\"m\"},{\"f\":\"+919900000002\",\"d\":{\"ts\":1409074949,\"push\":false,\"i\":\"1409074901796\",\"hm\":\"tester :8\"},\"t\":\"m\"},{\"f\":\"+919900000002\",\"d\":{\"ts\":1409074950,\"push\":false,\"i\":\"1409074901797\",\"hm\":\"tester :9\"},\"t\":\"m\"},{\"f\":\"+919900000002\",\"d\":{\"ts\":1409074951,\"push\":false,\"i\":\"1409074901798\",\"hm\":\"tester :10\"},\"t\":\"m\"},{\"f\":\"+919900000002\",\"d\":{\"ts\":1409074952,\"push\":false,\"i\":\"1409074901799\",\"hm\":\"tester :11\"},\"t\":\"m\"},{\"f\":\"+919900000002\",\"d\":{\"ts\":1409074953,\"push\":false,\"i\":\"1409074901800\",\"hm\":\"tester :12\"},\"t\":\"m\"},{\"f\":\"+919900000002\",\"d\":{\"ts\":1409074954,\"push\":false,\"i\":\"1409074901801\",\"hm\":\"tester :13\"},\"t\":\"m\"},{\"f\":\"+919900000002\",\"d\":{\"ts\":1409074955,\"push\":false,\"i\":\"1409074901802\",\"hm\":\"tester :14\"},\"t\":\"m\"},{\"f\":\"+919900000002\",\"d\":{\"ts\":1409074956,\"push\":false,\"i\":\"1409074901803\",\"hm\":\"tester :15\"},\"t\":\"m\"},{\"f\":\"+919900000002\",\"d\":{\"ts\":1409074957,\"push\":false,\"i\":\"1409074901804\",\"hm\":\"tester :16\"},\"t\":\"m\"},{\"f\":\"+919900000002\",\"d\":{\"ts\":1409074958,\"push\":false,\"i\":\"1409074901805\",\"hm\":\"tester :17\"},\"t\":\"m\"},{\"f\":\"+919900000002\",\"d\":{\"ts\":1409074959,\"push\":false,\"i\":\"1409074901806\",\"hm\":\"tester :18\"},\"t\":\"m\"},{\"f\":\"+919900000002\",\"d\":{\"ts\":1409074960,\"push\":false,\"i\":\"1409074901807\",\"hm\":\"tester :19\"},\"t\":\"m\"},{\"f\":\"+919900000002\",\"d\":{\"ts\":1409074961,\"push\":false,\"i\":\"1409074901808\",\"hm\":\"tester :20\"},\"t\":\"m\"}]},\"t\":\"bm\",\"ts\":1409075011}";
            if (string.IsNullOrEmpty(msg))
                return;

            while (turnOffNetworkManager)
            {
                Thread.Sleep(500);
            }

            JObject jsonObj = null;
            try
            {
                jsonObj = JObject.Parse(msg);
            }
            catch (JsonReaderException ex)
            {
                Debug.WriteLine("NetworkManager ::  onMessage : json Parse, Exception : " + ex.StackTrace);
                return;
            }
            string type = null;
            try
            {
                type = (string)jsonObj[HikeConstants.TYPE];
            }
            catch (JsonReaderException ex)
            {
                Debug.WriteLine("NetworkManager ::  onMessage : json Parse type, Exception : " + ex.StackTrace);
                return;
            }
            string msisdn = null;
            try
            {
                msisdn = (string)jsonObj[HikeConstants.FROM];
            }
            catch (JsonReaderException ex)
            {
                Debug.WriteLine("NetworkManager ::  onMessage : json Parse from, Exception : " + ex.StackTrace);
                return;
            }
            #region BULK MESSAGE
            if (BULK_MESSAGES == type)
            {
                try
                {
                    var jData = (JObject)jsonObj[HikeConstants.DATA];
                    JArray msgs = (JArray)jData[HikeConstants.MESSAGES];
                    List<ConvMessage> listMessages = new List<ConvMessage>();

                    Dictionary<int, MessageHash> dictHashMessage = new Dictionary<int, MessageHash>();
                    Stopwatch stopwtc = Stopwatch.StartNew();
                    for (int i = 0; i < msgs.Count; i++)
                    {
                        ConvMessage convMessage = ProcessBulkMessageData((JObject)msgs[i]);
                        if (convMessage != null)
                        {
                            int hash = (convMessage.MappedMessageId.ToString() + convMessage.Msisdn + convMessage.Message.Substring(0, 1) + convMessage.Message.Substring(convMessage.Message.Length - 2)).GetHashCode();
                            dictHashMessage[hash] = new MessageHash(hash);
                            listMessages.Add(convMessage);
                        }
                    }
                    stopwtc.Stop();
                    Debug.WriteLine("TIme for hash creation:{1}, messgeCount:{0}", listMessages.Count,stopwtc.ElapsedMilliseconds);

                    if (listMessages.Count > 0)
                    {
                        List<ConvMessage> listDBonce = new List<ConvMessage>(listMessages);
                        Stopwatch st = Stopwatch.StartNew();
                        MessagesTableUtils.IsMessageDuplicate(listDBonce);
                        st.Stop();
                        Debug.WriteLine("DUPCHECK TIME: Db opened once for {0} messages,Non DUplicate:{1},timeTaken:{2}", listMessages.Count, listDBonce.Count, st.ElapsedMilliseconds);

                        List<ConvMessage> listDBEveryTime = new List<ConvMessage>(listMessages);
                        st = Stopwatch.StartNew();
                        for (int i = 0; i < listDBEveryTime.Count; )
                        {
                            ConvMessage convMessage = listDBEveryTime[i];

                            if (MessagesTableUtils.IsMessageDuplicate(convMessage))
                                listDBEveryTime.RemoveAt(i);
                            else
                                i++;
                        }
                        st.Stop();
                        Debug.WriteLine("DUPCHECK TIME: Db opened every time for {0} messages,Non DUplicate:{1},timeTaken:{2}", listMessages.Count, listDBEveryTime.Count, st.ElapsedMilliseconds);

                        st = Stopwatch.StartNew();
                        List<MessageHash> listMessageHash = MessageHashUtils.addHashMessage(dictHashMessage.Values);
                        st.Stop();
                        Debug.WriteLine("DUPCHECK TIME: hash message for {0} messages,Non DUplicate:{1},timeTaken:{2}", listMessages.Count, listMessageHash.Count, st.ElapsedMilliseconds);

                        st = Stopwatch.StartNew();
                        if (listDBonce.Count > 0)
                        {
                            MessagesTableUtils.BulkInsertMessage(listDBonce);
                        }
                        st.Stop();
                        Debug.WriteLine("BULK TIME: for bulk insert of {0} messages,{1}", listDBonce.Count, st.ElapsedMilliseconds);
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine("NetworkManager::OnMessage:BulkMessages,Exception:{0},StackTrace:{1}", ex.Message, ex.StackTrace);
                }
            }
            #endregion
            #region MESSAGE
            else if (MESSAGE == type)  // this represents msg from another client through tornado(python) server.
            {
                try
                {
                    bool isPush = true;
                    JToken pushJToken;
                    var jData = (JObject)jsonObj[HikeConstants.DATA];
                    if (jData.TryGetValue(HikeConstants.PUSH, out pushJToken))
                        isPush = (Boolean)pushJToken;

                    ConvMessage convMessage = null;
                    try
                    {
                        convMessage = new ConvMessage(jsonObj);
                        if (Utils.isGroupConversation(convMessage.Msisdn))
                            GroupManager.Instance.LoadGroupParticipants(convMessage.Msisdn);
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine("NetworkManager ::  onMessage :  MESSAGE convmessage, Exception : " + ex.StackTrace);
                        return;
                    }

                    convMessage.MessageStatus = ConvMessage.State.RECEIVED_UNREAD;
                    ConversationListObject obj = MessagesTableUtils.addChatMessage(convMessage, false);

                    if (obj == null)
                        return;

                    if (convMessage.FileAttachment != null && (convMessage.FileAttachment.ContentType.Contains(HikeConstants.CONTACT)
                        || convMessage.FileAttachment.ContentType.Contains(HikeConstants.LOCATION)))
                    {
                        convMessage.FileAttachment.FileState = Attachment.AttachmentState.COMPLETED;
                    }
                    else if (convMessage.FileAttachment != null && !App.appSettings.Contains(App.AUTO_DOWNLOAD_SETTING))
                    {
                        FileTransfers.FileTransferManager.Instance.DownloadFile(convMessage.Msisdn, convMessage.MessageId.ToString(), convMessage.FileAttachment.FileKey, convMessage.FileAttachment.ContentType, convMessage.FileAttachment.FileSize);
                    }

                    if (convMessage.FileAttachment != null)
                    {
                        MiscDBUtil.saveAttachmentObject(convMessage.FileAttachment, convMessage.Msisdn, convMessage.MessageId);
                    }
                    object[] vals = new object[3];

                    vals[0] = convMessage;
                    vals[1] = obj;
                    vals[2] = isPush;
                    pubSub.publish(HikePubSub.MESSAGE_RECEIVED, vals);
                }
                catch (Exception ex)
                {
                    Debug.WriteLine("NetworkManager ::  onMessage :  MESSAGE , Exception : " + ex.StackTrace);
                    return;
                }
            }
            #endregion
            #region REQUEST_DISPLAY_PIC
            else if (REQUEST_DISPLAY_PIC == type)
            {
                string grpId = "";
                try
                {
                    grpId = (string)jsonObj[HikeConstants.TO];
                }
                catch (Exception ex)
                {
                    Debug.WriteLine("NetworkManager ::  onMessage :  REQUEST_DISPLAY_PIC, Exception : " + ex.StackTrace);
                }

                App.ViewModel.AddGroupPicForUpload(grpId);
            }
            #endregion
            #region START_TYPING
            else if (START_TYPING == type) /* Start Typing event received*/
            {
                string sentTo = "";
                try
                {
                    // If not null then this is group id
                    sentTo = (string)jsonObj[HikeConstants.TO];
                }
                catch (Exception ex)
                {
                    Debug.WriteLine("NetworkManager ::  onMessage :  START_TYPING, Exception : " + ex.StackTrace);
                }

                var number = String.IsNullOrEmpty(sentTo) ? msisdn : sentTo;

                if (App.ViewModel.ConvMap != null && App.ViewModel.ConvMap.ContainsKey(number)
                    && App.ViewModel.ConvMap[number].IsHidden && !App.ViewModel.IsHiddenModeActive)
                    return;

                object[] vals = new object[2];
                vals[0] = msisdn;
                vals[1] = sentTo;
                if (msisdn != null)
                    this.pubSub.publish(HikePubSub.TYPING_CONVERSATION, vals);
                return;
            }
            #endregion
            #region LAST_SEEN
            else if (LAST_SEEN == type) /* Last Seen received */
            {
                long lastSeen = 0;

                try
                {
                    var data = jsonObj[HikeConstants.DATA];
                    lastSeen = (long)data[HikeConstants.LASTSEEN];

                    if (lastSeen > 0)
                    {
                        long timedifference;
                        if (App.appSettings.TryGetValue(HikeConstants.AppSettings.TIME_DIFF_EPOCH, out timedifference))
                            lastSeen = lastSeen - timedifference;
                    }

                    if (lastSeen == -1)
                        FriendsTableUtils.SetFriendLastSeenTSToFile(msisdn, 0);
                    else if (lastSeen == 0)
                        FriendsTableUtils.SetFriendLastSeenTSToFile(msisdn, TimeUtils.getCurrentTimeStamp());
                    else
                        FriendsTableUtils.SetFriendLastSeenTSToFile(msisdn, lastSeen);
                }
                catch (Exception ex)
                {
                    Debug.WriteLine("NetworkManager ::  Last Seen :  TimeStamp, Exception : " + ex.StackTrace);
                }

                object[] vals = new object[2];
                vals[0] = msisdn;
                vals[1] = lastSeen;

                if (msisdn != null)
                    this.pubSub.publish(HikePubSub.LAST_SEEN, vals);

                return;
            }
            #endregion
            #region SMS_CREDITS
            else if (SMS_CREDITS == type) /* SMS CREDITS */
            {
                try
                {
                    int sms_credits = Int32.Parse((string)jsonObj[HikeConstants.DATA]);
                    App.WriteToIsoStorageSettings(App.SMS_SETTING, sms_credits);
                    this.pubSub.publish(HikePubSub.SMS_CREDIT_CHANGED, sms_credits);
                }
                catch (Exception ex)
                {
                    Debug.WriteLine("NetworkManager ::  onMessage :  SMS_CREDITS, Exception : " + ex.StackTrace);
                }
            }
            #endregion
            #region SERVER_REPORT
            else if (SERVER_REPORT == type) /* Represents Server has received the msg you sent */
            {
                string id = (string)jsonObj[HikeConstants.DATA];
                long msgID;
                try
                {
                    msgID = long.Parse(id);
                    Debug.WriteLine("NETWORK MANAGER:: Received report for Message Id " + msgID);
                }
                catch (Exception ex)
                {
                    Debug.WriteLine("NetworkManager ::  onMessage :  SERVER_REPORT, Exception : " + ex.StackTrace);
                    msgID = -1;
                    return;
                }
                this.pubSub.publish(HikePubSub.SERVER_RECEIVED_MSG, msgID);
                MiscDBUtil.UpdateDBsMessageStatus(null, msgID, (int)ConvMessage.State.SENT_CONFIRMED);
            }
            #endregion
            #region DELIVERY_REPORT
            else if (DELIVERY_REPORT == type) // this handles the case when msg with msgId is recieved by the recipient but is unread
            {
                string id = (string)jsonObj[HikeConstants.DATA];
                JToken msisdnToken = null;
                string msisdnToCheck = null;
                long msgID;
                try
                {
                    msgID = Int64.Parse(id);
                    jsonObj.TryGetValue(HikeConstants.TO, out msisdnToken);
                    if (msisdnToken != null)
                        msisdnToCheck = msisdnToken.ToString();
                    else
                        msisdnToCheck = msisdn;
                }
                catch (FormatException e)
                {
                    Debug.WriteLine("Network Manager:: Delivery Report, Json : {0} Exception : {1}", jsonObj.ToString(Formatting.None), e.StackTrace);
                    msgID = -1;
                    return;
                }

                object[] vals = new object[2];
                vals[0] = msgID;
                vals[1] = msisdnToCheck;
                this.pubSub.publish(HikePubSub.MESSAGE_DELIVERED, vals);
                MiscDBUtil.UpdateDBsMessageStatus(msisdnToCheck, msgID, (int)ConvMessage.State.SENT_DELIVERED);
            }
            #endregion
            #region MESSAGE_READ
            else if (MESSAGE_READ == type) // Message read by recipient
            {
                JArray msgIds = null;
                JToken msisdnToken = null;
                string msisdnToCheck = null;

                try
                {
                    msgIds = (JArray)jsonObj["d"];
                    jsonObj.TryGetValue(HikeConstants.TO, out msisdnToken);
                    if (msisdnToken != null)
                        msisdnToCheck = msisdnToken.ToString();
                    else
                        msisdnToCheck = msisdn;
                }
                catch (Exception ex)
                {
                    Debug.WriteLine("NetworkManager ::  onMessage :  MESSAGE_READ, Exception : " + ex.StackTrace);
                    return;
                }
                if (msgIds == null || msgIds.Count == 0)
                {
                    Debug.WriteLine("NETWORK MANAGER", "Update Error : Message id Array is empty or null . Check problem");
                    return;
                }

                long[] ids = new long[msgIds.Count];
                for (int i = 0; i < ids.Length; i++)
                {
                    ids[i] = Int64.Parse(msgIds[i].ToString());
                }
                object[] vals = new object[3];
                vals[0] = ids;
                vals[1] = msisdnToCheck;
                vals[2] = msisdn;
                updateDbBatch(msisdnToCheck, ids, (int)ConvMessage.State.SENT_DELIVERED_READ, msisdn);
                this.pubSub.publish(HikePubSub.MESSAGE_DELIVERED_READ, vals);
            }
            #endregion
            #region USER_JOINED USER_LEFT
            else if ((USER_JOINED == type) || (USER_LEFT == type))
            {
                JObject o = null;
                string uMsisdn = null;
                long serverTimestamp = 0;
                try
                {
                    o = (JObject)jsonObj[HikeConstants.DATA];
                    uMsisdn = (string)o[HikeConstants.MSISDN];
                    serverTimestamp = (long)jsonObj[HikeConstants.TIMESTAMP];
                }
                catch (Exception ex)
                {
                    Debug.WriteLine("NetworkManager ::  onMessage :  USER_JOINED USER_LEFT, Exception : " + ex.StackTrace);
                    return;
                }
                bool joined = USER_JOINED == type;
                bool isRejoin = false;
                JToken subtype;
                if (jsonObj.TryGetValue(HikeConstants.SUB_TYPE, out subtype))
                {
                    isRejoin = HikeConstants.SUBTYPE_REJOIN == (string)subtype;
                }
                // update contacts cache
                if (App.ViewModel.ContactsCache.ContainsKey(uMsisdn))
                    App.ViewModel.ContactsCache[uMsisdn].OnHike = joined;
                GroupManager.Instance.LoadGroupCache();
                if (joined)
                {
                    long lastTimeStamp;
                    if (App.appSettings.TryGetValue(HikeConstants.AppSettings.LAST_USER_JOIN_TIMESTAMP, out lastTimeStamp) && lastTimeStamp >= serverTimestamp)
                        return;
                    App.WriteToIsoStorageSettings(HikeConstants.AppSettings.LAST_USER_JOIN_TIMESTAMP, serverTimestamp);
                    // if user is in contact list then only show the joined msg
                    ContactInfo c = UsersTableUtils.getContactInfoFromMSISDN(uMsisdn);

                    // if user does not exists we dont know about his onhike status , so we need to process
                    ProcessUoUjMsgs(jsonObj, false, c != null, isRejoin);
                }
                // if user has left, mark him as non hike user in group cache
                else
                {
                    //remove image if stored.
                    if (App.ViewModel.ConvMap.ContainsKey(uMsisdn))
                    {
                        if (App.ViewModel.ConvMap[uMsisdn].Avatar != null)
                        {
                            App.ViewModel.ConvMap[uMsisdn].Avatar = null;
                            this.pubSub.publish(HikePubSub.UPDATE_PROFILE_ICON, uMsisdn);
                        }
                    }

                    MiscDBUtil.DeleteImageForMsisdn(uMsisdn);

                    if (GroupManager.Instance.GroupCache != null)
                    {
                        foreach (string key in GroupManager.Instance.GroupCache.Keys)
                        {
                            bool shouldSave = false;
                            List<GroupParticipant> l = GroupManager.Instance.GroupCache[key];
                            for (int i = 0; i < l.Count; i++)
                            {
                                if (l[i].Msisdn == uMsisdn)
                                {
                                    l[i].IsOnHike = false;
                                    shouldSave = true;
                                }
                            }
                            if (shouldSave)
                                GroupManager.Instance.SaveGroupCache(key);
                        }
                    }
                }
                UsersTableUtils.updateOnHikeStatus(uMsisdn, joined);
                ConversationTableUtils.updateOnHikeStatus(uMsisdn, joined);
                JToken jt;
                long ts = 0;
                if (joined && jsonObj.TryGetValue(HikeConstants.TIMESTAMP, out jt))
                    ts = jt.ToObject<long>();
                FriendsTableUtils.SetJoiningTime(uMsisdn, ts);
                this.pubSub.publish(joined ? HikePubSub.USER_JOINED : HikePubSub.USER_LEFT, uMsisdn);
            }
            #endregion
            #region ICON
            else if (ICON == type)
            {
                // donot do anything if its a GC as it will be handled in DP packet
                if (Utils.isGroupConversation(msisdn))
                    return;

                JToken temp;
                jsonObj.TryGetValue(HikeConstants.DATA, out temp);
                if (temp == null)
                    return;
                string iconBase64 = temp.ToString();
                byte[] imageBytes = System.Convert.FromBase64String(iconBase64);

                Stopwatch st = Stopwatch.StartNew();
                MiscDBUtil.saveAvatarImage(msisdn, imageBytes, true);
                st.Stop();
                if (App.ViewModel.ConvMap.ContainsKey(msisdn))
                {
                    try
                    {
                        App.ViewModel.ConvMap[msisdn].Avatar = imageBytes;
                        this.pubSub.publish(HikePubSub.UPDATE_PROFILE_ICON, msisdn);
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine("NetworkManager ::  onMessage :  ICON , Exception : " + ex.StackTrace);
                    }
                }
                else // update fav and contact section
                {
                    if (msisdn == null)
                        return;
                    ConversationListObject c = App.ViewModel.GetFav(msisdn);
                    if (c != null) // for favourites
                    {
                        c.Avatar = imageBytes;
                    }
                    else
                    {
                        c = App.ViewModel.GetPending(msisdn);
                        if (c != null) // for pending requests
                        {
                            c.Avatar = imageBytes;
                        }
                    }
                }
                if (App.ViewModel.ContactsCache.ContainsKey(msisdn))
                {
                    UI_Utils.Instance.BitmapImageCache.Remove(msisdn);
                    // this is done to notify that image is changed so load new one.
                    App.ViewModel.ContactsCache[msisdn].Avatar = null;
                }
                Deployment.Current.Dispatcher.BeginInvoke(() =>
                {
                    App.ViewModel.UpdateUserImageInStatus(msisdn);
                });
                long msec = st.ElapsedMilliseconds;
                Debug.WriteLine("Time to save image for msisdn {0} : {1}", msisdn, msec);
            }
            #endregion
            #region INVITE_INFO
            else if (INVITE_INFO == type)
            {
                JObject data;
                JToken temp;
                jsonObj.TryGetValue(HikeConstants.DATA, out temp);
                if (temp == null)
                    return;
                data = temp.ToObject<JObject>();
                try
                {
                    int invited = (int)data[HikeConstants.ALL_INVITEE];
                    App.WriteToIsoStorageSettings(App.INVITED, invited);
                }
                catch (Exception ex)
                {
                    Debug.WriteLine("NetworkManager ::  onMessage :  INVITE_INFO , Exception : " + ex.StackTrace);
                }
                try
                {
                    int invited_joined = (int)data[HikeConstants.ALL_INVITEE_JOINED];
                    App.WriteToIsoStorageSettings(App.INVITED_JOINED, invited_joined);
                }
                catch (Exception ex)
                {
                    Debug.WriteLine("NetworkManager ::  onMessage :  INVITE_INFO , Exception : " + ex.StackTrace);
                }
                string totalCreditsPerMonth = "0";
                try
                {
                    totalCreditsPerMonth = data[HikeConstants.TOTAL_CREDITS_PER_MONTH].ToString();
                }
                catch (Exception ex)
                {
                    Debug.WriteLine("NetworkManager ::  onMessage :  INVITE_INFO , Exception : " + ex.StackTrace);
                }

                if (!String.IsNullOrEmpty(totalCreditsPerMonth) && Int32.Parse(totalCreditsPerMonth) > 0)
                {
                    App.WriteToIsoStorageSettings(HikeConstants.TOTAL_CREDITS_PER_MONTH, totalCreditsPerMonth);
                    this.pubSub.publish(HikePubSub.INVITEE_NUM_CHANGED, null);
                }

            }
            #endregion
            #region ACCOUNT_INFO
            else if (HikeConstants.MqttMessageTypes.ACCOUNT_INFO == type)
            {
                JObject data = null;
                try
                {
                    data = (JObject)jsonObj[HikeConstants.DATA];
                    Debug.WriteLine("NETWORK MANAGER : Received account info json : {0}", jsonObj.ToString());
                    JToken jtoken;
                    if (data.TryGetValue(HikeConstants.SHOW_FREE_INVITES, out jtoken) && (bool)jtoken)
                    {
                        App.appSettings[HikeConstants.SHOW_POPUP] = null;//to show it is free sms pop up.
                    }
                    KeyValuePair<string, JToken> kv;
                    IEnumerator<KeyValuePair<string, JToken>> keyVals = data.GetEnumerator();
                    while (keyVals.MoveNext())
                    {
                        try
                        {
                            kv = keyVals.Current;
                            Debug.WriteLine("AI :: Key : " + kv.Key);
                            JToken valTok = kv.Value;
                            object oj = valTok.ToObject<object>();
                            if (kv.Key == HikeConstants.ACCOUNT)
                            {
                                JObject acntValObj = (JObject)oj;
                                KeyValuePair<string, JToken> kkvv;
                                IEnumerator<KeyValuePair<string, JToken>> kkeyVvals = acntValObj.GetEnumerator();
                                while (kkeyVvals.MoveNext())
                                {
                                    try
                                    {
                                        kkvv = kkeyVvals.Current;
                                        Debug.WriteLine("AI :: Key : " + kkvv.Key);

                                        #region FAVOURITES
                                        if (kkvv.Key == HikeConstants.FAVORITES)
                                        {
                                            JObject favJSON = kkvv.Value.ToObject<JObject>();
                                            if (favJSON != null)
                                            {
                                                Deployment.Current.Dispatcher.BeginInvoke(() =>
                                                {
                                                    string name = null;
                                                    bool thrAreFavs = false, isFav;
                                                    KeyValuePair<string, JToken> fkkvv;
                                                    IEnumerator<KeyValuePair<string, JToken>> kVals = favJSON.GetEnumerator();
                                                    while (kVals.MoveNext()) // this will iterate throught the list
                                                    {
                                                        isFav = true; // true for fav , false for pending
                                                        fkkvv = kVals.Current; // kkvv contains favourites MSISDN

                                                        if (App.ViewModel.BlockedHashset.Contains(fkkvv.Key)) // if this user is blocked ignore him
                                                            continue;

                                                        JObject pendingJSON = fkkvv.Value.ToObject<JObject>();
                                                        JToken pToken;
                                                        if (pendingJSON.TryGetValue(HikeConstants.REQUEST_PENDING, out pToken))
                                                        {
                                                            bool rp = false;
                                                            thrAreFavs = true;
                                                            if (pToken != null)
                                                            {
                                                                try
                                                                {
                                                                    object o = pToken.ToObject<object>();
                                                                    if (o is bool)
                                                                        rp = (bool)o;
                                                                }
                                                                catch { }
                                                            }

                                                            if (App.ViewModel.ConvMap.ContainsKey(fkkvv.Key))
                                                                App.ViewModel.ConvMap[fkkvv.Key].IsFav = true;

                                                            if (rp)
                                                                FriendsTableUtils.SetFriendStatus(fkkvv.Key, FriendsTableUtils.FriendStatusEnum.REQUEST_SENT);
                                                            else
                                                                FriendsTableUtils.SetFriendStatus(fkkvv.Key, FriendsTableUtils.FriendStatusEnum.UNFRIENDED_BY_HIM);
                                                        }
                                                        else if (pendingJSON.TryGetValue(HikeConstants.PENDING, out pToken) && pToken != null)
                                                        {
                                                            if (pToken.ToObject<bool>() == true) // pending is true
                                                            {
                                                                isFav = false;
                                                                FriendsTableUtils.SetFriendStatus(fkkvv.Key, FriendsTableUtils.FriendStatusEnum.REQUEST_RECIEVED);

                                                                ConversationListObject favObj;
                                                                if (App.ViewModel.ConvMap.ContainsKey(fkkvv.Key))
                                                                    favObj = App.ViewModel.ConvMap[fkkvv.Key];
                                                                else
                                                                {
                                                                    ContactInfo ci = UsersTableUtils.getContactInfoFromMSISDN(fkkvv.Key);
                                                                    if (ci != null)
                                                                        name = ci.Name;

                                                                    favObj = new ConversationListObject(fkkvv.Key, name, ci != null ? ci.OnHike : true, ci != null ? MiscDBUtil.getThumbNailForMsisdn(fkkvv.Key) : null);
                                                                }

                                                                this.pubSub.publish(HikePubSub.ADD_TO_PENDING, favObj);
                                                            }
                                                            else // pending is false
                                                            {
                                                                // in this case friend state should be ignored
                                                                FriendsTableUtils.SetFriendStatus(fkkvv.Key, FriendsTableUtils.FriendStatusEnum.UNFRIENDED_BY_YOU);
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            thrAreFavs = true;

                                                            if (App.ViewModel.ConvMap.ContainsKey(fkkvv.Key))
                                                                App.ViewModel.ConvMap[fkkvv.Key].IsFav = true;

                                                            FriendsTableUtils.SetFriendStatus(fkkvv.Key, FriendsTableUtils.FriendStatusEnum.FRIENDS);
                                                        }

                                                        Debug.WriteLine("Fav request, Msisdn : {0} ; isFav : {1}", fkkvv.Key, isFav);
                                                        LoadFavAndPending(isFav, fkkvv.Key); // true for favs
                                                    }

                                                    if (thrAreFavs)
                                                        this.pubSub.publish(HikePubSub.ADD_REMOVE_FAV, null);
                                                });
                                            }
                                        }

                                        #endregion
                                        #region FACEBOOK AND TWITTER
                                        if (kkvv.Key == HikeConstants.ACCOUNTS)
                                        {
                                            JObject socialObj = kkvv.Value.ToObject<JObject>();
                                            if (socialObj != null)
                                            {
                                                JToken socialJToken;
                                                socialObj.TryGetValue(HikeConstants.TWITTER, out socialJToken);
                                                if (socialJToken != null) // twitter is present in JSON
                                                {
                                                    App.WriteToIsoStorageSettings(HikeConstants.AppSettings.TWITTER_TOKEN, (string)(socialJToken as JObject)["id"]);
                                                    App.WriteToIsoStorageSettings(HikeConstants.AppSettings.TWITTER_TOKEN_SECRET, (string)(socialJToken as JObject)["token"]);
                                                    App.WriteToIsoStorageSettings(HikeConstants.TW_LOGGED_IN, true);
                                                }
                                                socialJToken = null;
                                                socialObj.TryGetValue(HikeConstants.FACEBOOK, out socialJToken);
                                                if (socialJToken != null) // facebook is present in JSON
                                                {
                                                    App.WriteToIsoStorageSettings(HikeConstants.AppSettings.FB_USER_ID, (string)(socialJToken as JObject)["id"]);
                                                    App.WriteToIsoStorageSettings(HikeConstants.AppSettings.FB_ACCESS_TOKEN, (string)(socialJToken as JObject)["token"]);
                                                    App.WriteToIsoStorageSettings(HikeConstants.FB_LOGGED_IN, true);
                                                }
                                            }

                                        }

                                        #endregion
                                        #region REWARDS
                                        if (App.MSISDN.Contains(HikeConstants.INDIA_COUNTRY_CODE))//for non indian dont show rewards
                                        {
                                            if (kkvv.Key == HikeConstants.REWARDS_TOKEN)
                                            {
                                                App.WriteToIsoStorageSettings(HikeConstants.REWARDS_TOKEN, kkvv.Value.ToString());
                                            }
                                            // whenever this key will come toggle the show rewards thing
                                            if (kkvv.Key == HikeConstants.SHOW_REWARDS)
                                            {
                                                App.WriteToIsoStorageSettings(HikeConstants.SHOW_REWARDS, kkvv.Value.ToObject<bool>());
                                                pubSub.publish(HikePubSub.REWARDS_TOGGLE, true);
                                            }

                                            if (kkvv.Key == HikeConstants.MqttMessageTypes.REWARDS)
                                            {
                                                JObject ttObj = kkvv.Value.ToObject<JObject>();
                                                if (ttObj != null)
                                                {
                                                    int rew_val = (int)ttObj[HikeConstants.REWARDS_VALUE];
                                                    App.WriteToIsoStorageSettings(HikeConstants.REWARDS_VALUE, rew_val);
                                                    pubSub.publish(HikePubSub.REWARDS_CHANGED, rew_val);
                                                }
                                            }
                                        }
                                        #endregion
                                        #region Profile Pic

                                        if (kkvv.Key == HikeConstants.ICON)
                                        {
                                            JToken iconToken = kkvv.Value.ToObject<JToken>();
                                            if (iconToken != null)
                                            {
                                                byte[] imageBytes = System.Convert.FromBase64String(iconToken.ToString());
                                                MiscDBUtil.saveAvatarImage(HikeConstants.MY_PROFILE_PIC, imageBytes, true);
                                                object[] vals = new object[3];
                                                vals[0] = App.MSISDN;
                                                vals[1] = null;
                                                vals[2] = imageBytes;
                                                App.HikePubSubInstance.publish(HikePubSub.ADD_OR_UPDATE_PROFILE, vals);
                                            }
                                        }

                                        #endregion
                                        #region LAST SEEN SEETING

                                        if (kkvv.Key == HikeConstants.LASTSEENONOFF)
                                        {
                                            try
                                            {
                                                var val = kkvv.Value.ToString();

                                                if (String.IsNullOrEmpty(val) || Convert.ToBoolean(val))
                                                {
                                                    App.appSettings.Remove(App.LAST_SEEN_SEETING);
                                                    App.appSettings.Save();
                                                }
                                                else
                                                    App.WriteToIsoStorageSettings(App.LAST_SEEN_SEETING, false);
                                            }
                                            catch { }
                                        }

                                        #endregion

                                        #region CHAT BACKGROUNDS

                                        else if (kkvv.Key == HikeConstants.CHAT_BACKGROUND_ARRAY)
                                        {
                                            bool isUpdated = false;

                                            var val = kkvv.Value;
                                            foreach (var obj in val)
                                            {
                                                JObject jObj = (JObject)obj;

                                                var id = (string)jObj[HikeConstants.MSISDN];
                                                bool hasCustomBg = false;
                                                JToken custom;
                                                if (jObj.TryGetValue(HikeConstants.HAS_CUSTOM_BACKGROUND, out custom))
                                                    hasCustomBg = (bool)custom;

                                                if (!hasCustomBg && ChatBackgroundHelper.Instance.UpdateChatBgMap(id, (string)jObj[HikeConstants.BACKGROUND_ID], TimeUtils.getCurrentTimeStamp(), false))
                                                {
                                                    isUpdated = true;

                                                    if (App.newChatThreadPage != null && App.newChatThreadPage.mContactNumber == id)
                                                        pubSub.publish(HikePubSub.CHAT_BACKGROUND_REC, id);
                                                }
                                            }

                                            if (isUpdated)
                                                ChatBackgroundHelper.Instance.SaveChatBgMapToFile();
                                        }

                                        #endregion
                                        #region DP PRIVACY SETTING
                                        else if (kkvv.Key == HikeConstants.AVATAR)
                                        {
                                            int value = (int)kkvv.Value;
                                            if (value == 2)
                                            {
                                                App.WriteToIsoStorageSettings(App.DISPLAYPIC_FAV_ONLY, true);
                                            }
                                        }
                                        #endregion

                                    }
                                    catch (Exception ex)
                                    {
                                        Debug.WriteLine("NetworkManager ::  onMessage :  ACCOUNT_INFO , Exception : " + ex.StackTrace);
                                    }
                                }

                                // save only for Twitter , FB
                                //App.WriteToIsoStorageSettings(kv.Key, (oj as JObject).ToString(Newtonsoft.Json.Formatting.None));
                            }// save only tc , invite_token
                            else if (kv.Key == HikeConstants.INVITE_TOKEN || kv.Key == HikeConstants.TOTAL_CREDITS_PER_MONTH)
                            {
                                string val = oj.ToString();
                                Debug.WriteLine("AI :: Value : " + val);

                                if (kv.Key == HikeConstants.INVITE_TOKEN || kv.Key == HikeConstants.TOTAL_CREDITS_PER_MONTH)
                                    App.WriteToIsoStorageSettings(kv.Key, val);
                            }
                        }
                        catch (Exception ex)
                        {
                            Debug.WriteLine("NetworkManager ::  onMessage :  ACCOUNT_INFO , Exception : " + ex.StackTrace);
                        }
                    }

                    JToken it = data[HikeConstants.TOTAL_CREDITS_PER_MONTH];
                    if (it != null)
                    {
                        string tc = it.ToString().Trim();
                        Debug.WriteLine("Account Info :: TOTAL_CREDITS_PER_MONTH : " + tc);
                        this.pubSub.publish(HikePubSub.INVITEE_NUM_CHANGED, null);
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("NETWORK MANAGER :: Account Info Json Exception " + e.StackTrace);
                    return;
                }

            }
            #endregion
            #region ACCOUNT CONFIG
            else if (HikeConstants.MqttMessageTypes.ACCOUNT_CONFIG == type)
            {
                JObject data = null;
                try
                {
                    data = (JObject)jsonObj[HikeConstants.DATA];
                    Debug.WriteLine("NETWORK MANAGER : Received account info json : {0}", jsonObj.ToString());
                    #region rewards zone
                    JToken rew;
                    if (App.MSISDN.Contains(HikeConstants.INDIA_COUNTRY_CODE))//for non indian dont show rewards
                    {
                        if (data.TryGetValue(HikeConstants.REWARDS_TOKEN, out rew))
                            App.WriteToIsoStorageSettings(HikeConstants.REWARDS_TOKEN, rew.ToString());
                        rew = null;
                        if (data.TryGetValue(HikeConstants.SHOW_REWARDS, out rew))
                        {
                            App.WriteToIsoStorageSettings(HikeConstants.SHOW_REWARDS, rew.ToObject<bool>());
                            pubSub.publish(HikePubSub.REWARDS_TOGGLE, true);
                        }
                    }
                    #endregion
                    #region batch push zone
                    JToken pushStatus;
                    if (data.TryGetValue(HikeConstants.ENABLE_PUSH_BATCH_SU, out pushStatus))
                    {
                        try
                        {
                            JArray jArray = (JArray)pushStatus;
                            if (jArray != null)
                            {
                                if (jArray.Count > 1)
                                {
                                    App.appSettings[App.STATUS_UPDATE_FIRST_SETTING] = (byte)jArray[0];
                                    App.WriteToIsoStorageSettings(App.STATUS_UPDATE_SECOND_SETTING, (byte)jArray[1]);
                                }
                                else if (jArray.Count == 1)
                                {
                                    App.WriteToIsoStorageSettings(App.STATUS_UPDATE_FIRST_SETTING, (byte)jArray[0]);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            Debug.WriteLine("NetworkManager ::  onMessage :  ACCOUNT CONFIG, enable push notification, Exception : " + ex.StackTrace);
                        }
                    }
                    #endregion
                    #region moods zone
                    if (data.TryGetValue(App.HIDE_CRICKET_MOODS, out rew))
                    {
                        //we are keeping state for hide because by default moods are ON. If server never sends this packet, no
                        //appsetting would ever be stored
                        bool showMoods = rew.ToObject<bool>();
                        App.WriteToIsoStorageSettings(App.HIDE_CRICKET_MOODS, !showMoods);
                    }
                    #endregion
                    #region Invite pop up
                    JToken jtokenMessageId;
                    if (data.TryGetValue(HikeConstants.MESSAGE_ID, out jtokenMessageId))
                    {
                        JToken jtokenShowFreeInvites;
                        string previousId;
                        if ((!App.appSettings.TryGetValue(HikeConstants.INVITE_POPUP_UNIQUEID, out previousId) || previousId != ((string)jtokenMessageId)) && data.TryGetValue(HikeConstants.SHOW_FREE_INVITES, out jtokenShowFreeInvites))
                        {
                            App.WriteToIsoStorageSettings(HikeConstants.INVITE_POPUP_UNIQUEID, (string)jtokenMessageId);
                            bool showInvite = (bool)jtokenShowFreeInvites;

                            if (showInvite)
                            {
                                JToken jtoken;
                                Object[] popupDataobj = new object[2];
                                //add title to zero place;
                                popupDataobj[0] = data.TryGetValue(HikeConstants.FREE_INVITE_POPUP_TITLE, out jtoken) ? (string)jtoken : null;
                                //add text to first place;
                                popupDataobj[1] = data.TryGetValue(HikeConstants.FREE_INVITE_POPUP_TEXT, out jtoken) ? (string)jtoken : null;
                                App.appSettings[HikeConstants.SHOW_POPUP] = popupDataobj;
                            }
                        }
                    }
                    #endregion
                    #region REFRESH IP LIST
                    JToken iplist;
                    if (data.TryGetValue(HikeConstants.IP_KEY, out iplist))
                    {
                        try
                        {
                            JArray jArray = (JArray)iplist;
                            if (jArray != null && jArray.Count > 0)
                            {
                                string[] ips = new string[jArray.Count];

                                for (int i = 0; i < jArray.Count; i++)
                                {
                                    ips[i] = (string)jArray[i];
                                }

                                App.WriteToIsoStorageSettings(App.IP_LIST, ips);
                            }
                        }
                        catch (Exception ex)
                        {
                            Debug.WriteLine("NetworkManager ::  onMessage :  ACCOUNT CONFIG, List IPs, Exception : " + ex.StackTrace);
                        }
                    }
                    #endregion
                }
                catch (Exception ex)
                {
                    Debug.WriteLine("NetworkManager ::  onMessage :  ACCOUNT CONFIG , Exception : " + ex.StackTrace);
                }

            }
            #endregion
            #region USER_OPT_IN
            else if (HikeConstants.MqttMessageTypes.USER_OPT_IN == type)
            {
                // {"t":"uo", "d":{"msisdn":"", "credits":10}}
                ProcessUoUjMsgs(jsonObj, true, true, false);
            }
            #endregion
            #region GROUP CHAT RELATED

            #region GROUP_CHAT_JOIN
            else if (HikeConstants.MqttMessageTypes.GROUP_CHAT_JOIN == type) //Group chat join
            {
                string groupName = string.Empty;
                jsonObj[HikeConstants.TYPE] = HikeConstants.MqttMessageTypes.GROUP_CHAT_JOIN_NEW;
                JArray arr = null;
                try
                {
                    arr = (JArray)jsonObj[HikeConstants.DATA];
                }
                catch (Exception e)
                {
                    Debug.WriteLine("NETWORK MANAGER :: Exception while parsing GCJ packet : " + e.StackTrace);
                }
                if (arr == null || !arr.HasValues)
                    return;

                string grpId = null;
                try
                {
                    grpId = jsonObj[HikeConstants.TO].ToString();
                }
                catch (Exception ex)
                {
                    Debug.WriteLine("NetworkManager ::  onMessage :  GROUP_CHAT_JOIN , Exception : " + ex.StackTrace);
                }
                GroupManager.Instance.LoadGroupParticipants(grpId);
                ConvMessage convMessage = null;
                List<GroupParticipant> dndList = new List<GroupParticipant>(1);
                GroupChatState gcState = AddGroupmembers(arr, grpId, dndList);

                #region META DATA CHAT BACKGROUND

                JObject metaData = (JObject)jsonObj[HikeConstants.METADATA];
                if (metaData != null)
                {
                    #region chat background
                    try
                    {
                        JObject chatBg = (JObject)metaData[HikeConstants.MqttMessageTypes.CHAT_BACKGROUNDS];
                        if (chatBg != null)
                        {
                            bool hasCustomBg = false;
                            JToken custom;
                            if (chatBg.TryGetValue(HikeConstants.HAS_CUSTOM_BACKGROUND, out custom))
                                hasCustomBg = (bool)custom;

                            if (!hasCustomBg && ChatBackgroundHelper.Instance.UpdateChatBgMap(grpId, (string)chatBg[HikeConstants.BACKGROUND_ID], TimeUtils.getCurrentTimeStamp()))
                                pubSub.publish(HikePubSub.CHAT_BACKGROUND_REC, grpId);
                        }
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine("NetworkManager ::  onMessage :  GROUP_CHAT_JOIN with chat background, Exception : " + ex.StackTrace);
                    }

                    #endregion

                    #region GROUP NAME

                    JToken gName;
                    //pubsub for gcn is not raised
                    if (metaData.TryGetValue(HikeConstants.NAME, out gName))
                        groupName = gName.ToString().Trim();

                    #endregion
                }
                #endregion

                #region NEW GROUP
                if (gcState == GroupChatState.NEW_GROUP) // this group is created by someone else
                {
                    // 1. create new msg for new GC
                    // 2. create DND msg also
                    try
                    {
                        convMessage = new ConvMessage(jsonObj, false, false); // this will be normal DND msg
                        List<GroupParticipant> dndMembersList = GetDNDMembers(grpId);
                        if (dndMembersList != null && dndMembersList.Count > 0)
                        {
                            string dndMsg = GetDndMsg(dndMembersList);
                            convMessage.Message = convMessage.Message.Replace(";", "") + ";" + dndMsg.Replace(";", "");// as while displaying MEMBERS_JOINED in CT we split on ; for dnd message
                        }
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine("NetworkManager ::  onMessage :  NEW GROUP , Exception : " + ex.StackTrace);
                        return;
                    }
                }
                #endregion
                #region ALREADY ADDED TO GROUP
                else if (gcState == GroupChatState.ALREADY_ADDED_TO_GROUP)
                {
                    // update JSON in the metadata .....
                    if (dndList.Count > 0) // there are people who are in dnd , show their msg
                    {
                        JObject o = new JObject();
                        o[HikeConstants.TYPE] = HikeConstants.MqttMessageTypes.DND_USER_IN_GROUP;
                        convMessage = new ConvMessage(); // this will be normal DND msg
                        convMessage.Msisdn = grpId;
                        convMessage.MetaDataString = o.ToString(Formatting.None);
                        convMessage.Message = GetDndMsg(dndList);
                        convMessage.MessageStatus = ConvMessage.State.RECEIVED_UNREAD;
                        convMessage.GrpParticipantState = ConvMessage.ParticipantInfoState.DND_USER;
                        convMessage.Timestamp = TimeUtils.getCurrentTimeStamp();
                    }
                    else
                    {
                        GroupManager.Instance.SaveGroupCache(grpId);
                        return;
                    }
                }
                #endregion
                #region DUPLICATE GCJ
                else if (gcState == GroupChatState.DUPLICATE)
                {
                    return;
                }
                #endregion
                #region KICKEDOUT USER ADDED
                else if (gcState == GroupChatState.KICKEDOUT_USER_ADDED)
                {
                    GroupTableUtils.SetGroupAlive(grpId);
                    convMessage = new ConvMessage(jsonObj, false, false); // this will be normal GCJ msg
                    this.pubSub.publish(HikePubSub.GROUP_ALIVE, grpId);
                }
                #endregion
                #region ADD NEW MEMBERS TO EXISTING GROUP
                else // new members are added to group
                {
                    try
                    {
                        convMessage = new ConvMessage(jsonObj, false, true); // this will be normal DND msg
                        List<GroupParticipant> dndMembersList = GetDNDMembers(grpId);
                        if (dndMembersList != null && dndMembersList.Count > 0)
                        {
                            string dndMsg = GetDndMsg(dndMembersList);
                            convMessage.Message = convMessage.Message.Replace(";", "") + ";" + dndMsg.Replace(";", "");// as while displaying MEMBERS_JOINED in CT we split on ; for dnd message
                        }
                    }
                    catch
                    {
                        return;
                    }
                }
                #endregion

                ConversationListObject obj = MessagesTableUtils.addGroupChatMessage(convMessage, jsonObj, groupName);
                if (obj == null)
                    return;
                GroupManager.Instance.SaveGroupCache(grpId);
                //App.WriteToIsoStorageSettings(App.GROUPS_CACHE, GroupManager.Instance.GroupCache);
                Debug.WriteLine("NetworkManager", "Group is new");

                object[] vals = new object[2];
                vals[0] = convMessage;
                vals[1] = obj;

                this.pubSub.publish(HikePubSub.MESSAGE_RECEIVED, vals);
                this.pubSub.publish(HikePubSub.PARTICIPANT_JOINED_GROUP, jsonObj);
            }
            #endregion
            #region GROUP_CHAT_NAME CHANGE
            else if (HikeConstants.MqttMessageTypes.GROUP_CHAT_NAME == type) //Group chat name change
            {
                try
                {
                    string groupName = (string)jsonObj[HikeConstants.DATA];
                    groupName = groupName.Trim();
                    string groupId = (string)jsonObj[HikeConstants.TO];
                    //no self check as server will send packet of group name change if changed by self
                    //we need to use this in case of self name change and unlink account
                    ConversationListObject cObj;
                    if (App.ViewModel.ConvMap.TryGetValue(groupId, out cObj))
                    {
                        if (cObj.ContactName == groupName || string.IsNullOrEmpty(groupName))//group name is same as previous or empty
                            return;
                    }
                    else
                        return;//group doesn't exists

                    GroupManager.Instance.LoadGroupParticipants(groupId);
                    ConversationTableUtils.updateGroupName(groupId, groupName);
                    ConvMessage cm = new ConvMessage(ConvMessage.ParticipantInfoState.GROUP_NAME_CHANGE, jsonObj);
                    ConversationListObject obj = MessagesTableUtils.addChatMessage(cm, false);
                    if (obj == null)
                        return;
                    object[] vals = new object[2];
                    vals[0] = cm;
                    vals[1] = obj;

                    bool goAhead = GroupTableUtils.updateGroupName(groupId, groupName);
                    if (goAhead)
                    {
                        Deployment.Current.Dispatcher.BeginInvoke(() =>
                        {
                            App.ViewModel.ConvMap[groupId].ContactName = groupName;
                            this.pubSub.publish(HikePubSub.MESSAGE_RECEIVED, vals);
                            this.pubSub.publish(HikePubSub.GROUP_NAME_CHANGED, groupId);
                        });
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("NETWORK MANAGER :: Exception while parsing GCN packet : " + e.StackTrace);
                }
            }
            #endregion
            #region GROUP DISPLAY PIC CHANGE
            else if (HikeConstants.MqttMessageTypes.GROUP_DISPLAY_PIC == type)
            {
                string groupId = (string)jsonObj[HikeConstants.TO];
                string from = (string)jsonObj[HikeConstants.FROM];
                ConversationListObject cObj;
                if (!App.ViewModel.ConvMap.TryGetValue(groupId, out cObj))
                    return;//if group doesn't exist return
                JToken temp;
                jsonObj.TryGetValue(HikeConstants.DATA, out temp);
                if (temp == null)
                    return;
                string iconBase64 = temp.ToString();

                //check if same image is set
                if (cObj.Avatar != null)
                {
                    string previousImage = System.Convert.ToBase64String(cObj.Avatar);
                    if (previousImage.Length > 4 && iconBase64.Length > 4 &&
                        previousImage.Substring(0, 5) == iconBase64.Substring(0, 5) &&
                        previousImage.Substring(previousImage.Length - 5) == iconBase64.Substring(iconBase64.Length - 5))
                    {
                        return;
                    }
                }

                GroupManager.Instance.LoadGroupParticipants(groupId);

                byte[] imageBytes = System.Convert.FromBase64String(iconBase64);
                ConvMessage cm = new ConvMessage(ConvMessage.ParticipantInfoState.GROUP_PIC_CHANGED, jsonObj);
                ConversationListObject obj = MessagesTableUtils.addChatMessage(cm, false);
                if (obj == null)
                    return;
                MiscDBUtil.saveAvatarImage(groupId, imageBytes, true);
                if (App.ViewModel.ConvMap.ContainsKey(groupId))
                {
                    Deployment.Current.Dispatcher.BeginInvoke(() =>
                    {
                        try
                        {
                            App.ViewModel.ConvMap[groupId].Avatar = imageBytes;
                            object[] oa = new object[2];
                            oa[0] = cm;
                            oa[1] = obj;

                            this.pubSub.publish(HikePubSub.MESSAGE_RECEIVED, oa);
                            this.pubSub.publish(HikePubSub.UPDATE_GRP_PIC, groupId);
                        }
                        catch (Exception ex)
                        {
                            Debug.WriteLine("Network Manager : Exception in ICON :: " + ex.StackTrace);
                        }
                    });
                }
            }
            #endregion
            #region GROUP_CHAT_LEAVE
            else if (HikeConstants.MqttMessageTypes.GROUP_CHAT_LEAVE == type) //Group chat leave
            {
                /*
                * 1. Update Conversation list name if groupName is not set.
                * 2. Update DB.
                * 3. Notify GroupInfo page (if opened)
                * 4. Notify Chat Thread page if opened.
                */
                try
                {
                    string groupId = (string)jsonObj[HikeConstants.TO];
                    string fromMsisdn = (string)jsonObj[HikeConstants.DATA];
                    GroupManager.Instance.LoadGroupParticipants(groupId);
                    GroupParticipant gp = GroupManager.Instance.GetGroupParticipant(null, fromMsisdn, groupId);
                    if (gp == null || gp.HasLeft)
                        return;

                    ConvMessage convMsg = new ConvMessage(jsonObj, false, false);
                    GroupManager.Instance.SaveGroupCache(groupId);
                    ConversationListObject cObj = MessagesTableUtils.addChatMessage(convMsg, false); // grp name will change inside this
                    if (cObj == null)
                        return;

                    object[] vals = new object[2];
                    vals[0] = convMsg;
                    vals[1] = cObj;

                    this.pubSub.publish(HikePubSub.MESSAGE_RECEIVED, vals);
                    this.pubSub.publish(HikePubSub.PARTICIPANT_LEFT_GROUP, convMsg);
                }
                catch (Exception e)
                {
                    Debug.WriteLine("NETWORK MANAGER :: Exception while parsing GCL packet : " + e.StackTrace);
                }
            }
            #endregion
            #region GROUP_CHAT_END
            else if (HikeConstants.MqttMessageTypes.GROUP_CHAT_END == type) //Group chat end
            {
                try
                {
                    string groupId = (string)jsonObj[HikeConstants.TO];
                    bool goAhead = GroupTableUtils.SetGroupDead(groupId);
                    if (goAhead)
                    {
                        ConvMessage convMessage = new ConvMessage(jsonObj, false, false);
                        ConversationListObject cObj = MessagesTableUtils.addChatMessage(convMessage, false);
                        if (cObj == null)
                            return;

                        //explicitly set IsGroupAlive false to prevent db hit
                        cObj.IsGroupAlive = false;

                        object[] vals = new object[2];
                        vals[0] = convMessage;
                        vals[1] = cObj;

                        this.pubSub.publish(HikePubSub.MESSAGE_RECEIVED, vals);
                        this.pubSub.publish(HikePubSub.GROUP_END, groupId);
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("NETWORK MANAGER :: Exception while parsing GCE packet : " + e.StackTrace);
                }
            }
            #endregion

            #region GROUP_OWNER_CHANGED
            else if (HikeConstants.MqttMessageTypes.GROUP_OWNER_CHANGED == type) //Group chat end
            {
                try
                {
                    string groupId = (string)jsonObj[HikeConstants.TO];

                    if (!App.ViewModel.ConvMap.ContainsKey(groupId))//group doesn't exists
                        return;

                    JObject data = (JObject)jsonObj[HikeConstants.DATA];

                    JToken jtoken;
                    if (data.TryGetValue(HikeConstants.MqttMessageTypes.MSISDN_KEYWORD, out jtoken))
                    {
                        string newOwner = (string)jtoken;

                        if (string.IsNullOrEmpty(newOwner))
                            return;

                        if (GroupTableUtils.UpdateGroupOwner(groupId, newOwner))
                        {
                            Object[] objArray = new object[] { groupId, newOwner };
                            App.ViewModel.GroupOwnerChanged(objArray);
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("NETWORK MANAGER :: Exception while parsing GOC packet : " + e.StackTrace);
                }
            }
            #endregion

            #endregion
            #region INTERNATIONAL USER
            else if (HikeConstants.MqttMessageTypes.BLOCK_INTERNATIONAL_USER == type)
            {
                ConvMessage cm = new ConvMessage(ConvMessage.ParticipantInfoState.INTERNATIONAL_USER, jsonObj);
                cm.Msisdn = msisdn;
                ConversationListObject obj = MessagesTableUtils.addChatMessage(cm, false);
                if (obj == null)
                    return;
                object[] vals = new object[2];
                vals[0] = cm;
                vals[1] = obj;
                pubSub.publish(HikePubSub.MESSAGE_RECEIVED, vals);
            }
            #endregion
            #region ADD FAVOURITES
            else if (HikeConstants.MqttMessageTypes.ADD_FAVOURITE == type)
            {
                try
                {
                    // if user is blocked simply ignore the request.
                    if (App.ViewModel.BlockedHashset.Contains(msisdn))
                        return;
                    FriendsTableUtils.FriendStatusEnum friendStatus = FriendsTableUtils.SetFriendStatus(msisdn, FriendsTableUtils.FriendStatusEnum.REQUEST_RECIEVED);
                    if (friendStatus == FriendsTableUtils.FriendStatusEnum.ALREADY_FRIENDS)
                        return;

                    if (friendStatus == FriendsTableUtils.FriendStatusEnum.FRIENDS)
                    {
                        StatusMessage sm = new StatusMessage(msisdn, String.Empty, StatusMessage.StatusType.IS_NOW_FRIEND, null, TimeUtils.getCurrentTimeStamp(), -1, false);
                        App.HikePubSubInstance.publish(HikePubSub.SAVE_STATUS_IN_DB, sm);
                        App.HikePubSubInstance.publish(HikePubSub.STATUS_RECEIVED, sm);
                    }
                    App.HikePubSubInstance.publish(HikePubSub.FRIEND_RELATIONSHIP_CHANGE, new Object[] { msisdn, friendStatus });
                    if (App.ViewModel.Isfavourite(msisdn)) // already favourite
                        return;
                    if (App.ViewModel.IsPending(msisdn))
                        return;

                    try
                    {
                        ConversationListObject favObj;
                        if (App.ViewModel.ConvMap.ContainsKey(msisdn))
                            favObj = App.ViewModel.ConvMap[msisdn];
                        else
                        {
                            ContactInfo ci = UsersTableUtils.getContactInfoFromMSISDN(msisdn);
                            string name = null;
                            if (ci == null)
                            {
                                JToken data;
                                if (jsonObj.TryGetValue(HikeConstants.DATA, out data))
                                {
                                    JToken n;
                                    JObject dobj = data.ToObject<JObject>();
                                    if (dobj.TryGetValue(HikeConstants.NAME, out n))
                                        name = n.ToString();
                                }
                            }
                            else
                                name = ci.Name;
                            favObj = new ConversationListObject(msisdn, name, ci != null ? ci.OnHike : true, ci != null ? MiscDBUtil.getThumbNailForMsisdn(msisdn) : null);
                        }
                        // this will ensure there will be one pending request for a particular msisdn
                        App.ViewModel.PendingRequests[msisdn] = favObj;
                        MiscDBUtil.SavePendingRequests();
                        this.pubSub.publish(HikePubSub.ADD_TO_PENDING, favObj);
                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine("Network Manager : Exception in ADD FAVORITES :: " + e.StackTrace);
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Network Manager :: Exception in ADD TO FAVS : " + e.StackTrace);
                }
            }
            #endregion
            #region POSTPONE FRIEND REQUEST
            else if (HikeConstants.MqttMessageTypes.POSTPONE_FRIEND_REQUEST == type)
            {
                try
                {
                    FriendsTableUtils.FriendStatusEnum friendStatus = FriendsTableUtils.SetFriendStatus(msisdn, FriendsTableUtils.FriendStatusEnum.UNFRIENDED_BY_HIM);
                    App.HikePubSubInstance.publish(HikePubSub.FRIEND_RELATIONSHIP_CHANGE, new Object[] { msisdn, friendStatus });
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Network Manager :: Exception in PostPone from FAVS : " + e.StackTrace);
                }
            }
            #endregion
            #region REMOVE FAVOURITES
            else if (HikeConstants.MqttMessageTypes.REMOVE_FAVOURITE == type)
            {
                try
                {
                    // if user is blocked ignore his requests
                    if (App.ViewModel.BlockedHashset.Contains(msisdn))
                        return;

                    FriendsTableUtils.FriendStatusEnum friendStatus = FriendsTableUtils.SetFriendStatus(msisdn, FriendsTableUtils.FriendStatusEnum.UNFRIENDED_BY_HIM);
                    App.HikePubSubInstance.publish(HikePubSub.FRIEND_RELATIONSHIP_CHANGE, new Object[] { msisdn, friendStatus });
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Network Manager :: Exception in Remove from Friends: " + e.StackTrace);
                }
            }
            #endregion
            #region REWARDS VALUE CHANGED
            else if (HikeConstants.MqttMessageTypes.REWARDS == type)
            {
                JObject data = null;
                try
                {
                    data = (JObject)jsonObj[HikeConstants.DATA];
                    int rewards_val = (int)data[HikeConstants.REWARDS_VALUE];
                    App.WriteToIsoStorageSettings(HikeConstants.REWARDS_VALUE, rewards_val);
                    pubSub.publish(HikePubSub.REWARDS_CHANGED, rewards_val);
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Netwok Manager :: Exception in REWARDS : " + e.StackTrace);
                }
            }
            #endregion
            #region STATUS UPDATE
            else if (HikeConstants.MqttMessageTypes.STATUS_UPDATE == type)
            {
                // if this user is already blocked simply ignore his status
                if (App.ViewModel.BlockedHashset.Contains(msisdn))
                    return;

                JObject data = null;
                try
                {
                    data = (JObject)jsonObj[HikeConstants.DATA];
                    StatusMessage sm = null;
                    JToken val;
                    string iconBase64 = null;

                    if (data.TryGetValue(HikeConstants.THUMBNAIL, out val) && val != null)
                        iconBase64 = val.ToString();

                    val = null;
                    long ts = 0;

                    if (jsonObj.TryGetValue(HikeConstants.TIMESTAMP, out val) && val != null)
                    {
                        ts = val.ToObject<long>();
                        long tsCorrection;

                        if (App.appSettings.TryGetValue(HikeConstants.AppSettings.TIME_DIFF_EPOCH, out tsCorrection))
                            ts -= tsCorrection;
                    }

                    val = null;
                    string id = null;
                    JToken idToken;

                    if (data.TryGetValue(HikeConstants.STATUS_ID, out idToken))
                        id = idToken.ToString();
                    #region HANDLE PROFILE PIC UPDATE
                    if (data.TryGetValue(HikeConstants.PROFILE_UPDATE, out val) && true == (bool)val)
                    {
                        sm = new StatusMessage(msisdn, id, StatusMessage.StatusType.PROFILE_PIC_UPDATE, id, ts,
                            StatusUpdateHelper.Instance.IsTwoWayFriend(msisdn), -1, -1, 0, true);
                        idToken = null;
                        if (iconBase64 != null)
                        {
                            byte[] imageBytes = System.Convert.FromBase64String(iconBase64);
                            if (!StatusMsgsTable.InsertStatusMsg(sm, true))//will return false if status already exists
                                return;
                            MiscDBUtil.saveProfileImages(msisdn, imageBytes, sm.ServerId);
                            jsonObj[HikeConstants.PROFILE_PIC_ID] = sm.ServerId;
                            UI_Utils.Instance.BitmapImageCache.Remove(msisdn);
                        }
                    }
                    #endregion

                    #region HANDLE TEXT UPDATE
                    else if (data.TryGetValue(HikeConstants.TEXT_UPDATE_MSG, out val) && val != null && !string.IsNullOrWhiteSpace(val.ToString()))
                    {
                        int moodId = -1;
                        int tod = 0;
                        if (data[HikeConstants.MOOD] != null)
                        {
                            string moodId_String = data[HikeConstants.MOOD].ToString();
                            if (!string.IsNullOrEmpty(moodId_String))
                            {
                                int.TryParse(moodId_String, out moodId);
                                moodId = MoodsInitialiser.GetRecieverMoodId(moodId);
                                try
                                {
                                    if (moodId > 0 && data[HikeConstants.TIME_OF_DAY] != null && !String.IsNullOrWhiteSpace(data[HikeConstants.TIME_OF_DAY].ToString()))
                                        tod = data[HikeConstants.TIME_OF_DAY].ToObject<int>();

                                }
                                catch (Exception ex)
                                {
                                    tod = 0;
                                    Debug.WriteLine("NetworkManager :: Exception in TextStatus Updates : " + ex.StackTrace);
                                }
                            }
                        }
                        sm = new StatusMessage(msisdn, val.ToString(), StatusMessage.StatusType.TEXT_UPDATE, id, ts,
                            StatusUpdateHelper.Instance.IsTwoWayFriend(msisdn), -1, moodId, tod, true);
                        if (!StatusMsgsTable.InsertStatusMsg(sm, true))//will return false if status already exists
                            return;
                    }
                    #endregion

                    ConvMessage cm = new ConvMessage(ConvMessage.ParticipantInfoState.STATUS_UPDATE, jsonObj, ts);
                    cm.Msisdn = msisdn;
                    ConversationListObject obj = MessagesTableUtils.addChatMessage(cm, false);

                    // if conversation  with this user exists then only show him status updates on chat thread and conversation screen
                    if (obj != null)
                    {
                        object[] vals = new object[2];
                        vals[0] = cm;
                        vals[1] = null; // always send null as we dont want any activity on conversation page

                        pubSub.publish(HikePubSub.MESSAGE_RECEIVED, vals);
                        sm.MsgId = cm.MessageId;
                        StatusMsgsTable.UpdateMsgId(sm);
                    }
                    pubSub.publish(HikePubSub.STATUS_RECEIVED, sm);
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Network Manager :: Exception in STATUS UPDATES : " + e.StackTrace);
                }
            }
            #endregion
            #region DELETE STATUS
            else if (HikeConstants.MqttMessageTypes.DELETE_STATUS_UPDATE == type)
            {
                JObject data = null;
                try
                {
                    if (App.ViewModel.BlockedHashset.Contains(msisdn)) // if this user is blocked simply ignore him 
                        return;
                    data = (JObject)jsonObj[HikeConstants.DATA];
                    string id = (string)data[HikeConstants.STATUS_ID];
                    long msgId = StatusMsgsTable.DeleteStatusMsg(id);
                    if (msgId > 0) // delete only if msgId is greater than 0
                    {
                        MessagesTableUtils.deleteMessage(msgId);
                        // if conversation from this user exists
                        if (App.ViewModel.ConvMap.ContainsKey(msisdn))
                        {
                            ConversationListObject co = App.ViewModel.ConvMap[msisdn];
                            // if last msg is status update and its of same id which is about to get deleted, then only proceed
                            if (co.IsLastMsgStatusUpdate && co.LastMsgId == msgId)
                            {
                                ConvMessage cm = MessagesTableUtils.getLastMessageForMsisdn(msisdn);
                                if (cm != null)
                                {
                                    co.LastMessage = cm.Message;
                                    co.LastMsgId = cm.MessageId;
                                    co.MessageStatus = cm.MessageStatus;

                                    if (cm.FileAttachment != null)
                                    {
                                        if (cm.FileAttachment.ContentType.Contains(HikeConstants.IMAGE))
                                            co.LastMessage = AppResources.Image_Txt;
                                        else if (cm.FileAttachment.ContentType.Contains(HikeConstants.AUDIO))
                                            co.LastMessage = AppResources.Audio_Txt;
                                        else if (cm.FileAttachment.ContentType.Contains(HikeConstants.VIDEO))
                                            co.LastMessage = AppResources.Video_Txt;
                                        else if (cm.FileAttachment.ContentType.Contains(HikeConstants.CT_CONTACT))
                                            co.LastMessage = AppResources.ContactTransfer_Text;
                                        else if (cm.FileAttachment.ContentType.Contains(HikeConstants.LOCATION))
                                            co.LastMessage = AppResources.Location_Txt;
                                        else
                                            co.LastMessage = AppResources.UnknownFile_txt;
                                        co.TimeStamp = cm.Timestamp;
                                    }
                                    else // check here nudge , notification , status update
                                    {
                                        // if metadata string 
                                        if (!string.IsNullOrEmpty(cm.MetaDataString))
                                        {
                                            // NUDGE
                                            if (cm.MetaDataString.Contains("poke"))
                                            {
                                                co.LastMessage = AppResources.Nudge;
                                            }
                                            // STATUS UPDATE
                                            else if (cm.MetaDataString.Contains(HikeConstants.MqttMessageTypes.STATUS_UPDATE))
                                            {
                                                JObject jdata = null;
                                                try
                                                {
                                                    jdata = JObject.Parse(cm.MetaDataString);
                                                }
                                                catch (Exception e)
                                                {
                                                }
                                                if (jdata != null)
                                                {
                                                    JToken val;
                                                    JObject ddata = jdata[HikeConstants.DATA] as JObject;
                                                    // profile pic update
                                                    if (ddata.TryGetValue(HikeConstants.PROFILE_UPDATE, out val) && true == (bool)val)
                                                        co.LastMessage = "\"" + AppResources.Update_Profile_Pic_txt + "\"";
                                                    else // status , mood update
                                                        co.LastMessage = "\"" + cm.Message + "\"";
                                                }
                                            }
                                            else // NOTIFICATION AND NORMAL MSGS
                                            {
                                                co.LastMessage = cm.Message;
                                            }
                                        }
                                    }

                                }
                                else // there are no msgs left remove the conversation from db and map
                                {
                                    ConversationTableUtils.deleteConversation(msisdn);
                                    pubSub.publish(HikePubSub.DELETE_STATUS_AND_CONV, App.ViewModel.ConvMap[msisdn]);
                                    App.ViewModel.ConvMap.Remove(msisdn);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    Debug.WriteLine("NETWORK MANAGER :: Exception in DELETE STATUS : " + e.StackTrace);
                }
            }
            #endregion
            #region SERVER TIMESTAMP
            else if (type == SERVER_TIMESTAMP)
            {
                long timediff = (long)jsonObj[HikeConstants.TIMESTAMP] - TimeUtils.getCurrentTimeStamp();
                App.WriteToIsoStorageSettings(HikeConstants.AppSettings.TIME_DIFF_EPOCH, timediff);
                //todo:place this setting in some different file as will be written again and agian
            }
            #endregion
            #region STICKER
            else if (type == STICKER)
            {
                try
                {
                    string subType = (string)jsonObj[HikeConstants.SUB_TYPE];
                    JObject jsonData = (JObject)jsonObj[HikeConstants.DATA];

                    //do same for category as well as subcategory
                    if (subType == HikeConstants.ADD_STICKER || subType == HikeConstants.ADD_CATEGORY)
                    {
                        string category = (string)jsonData[HikeConstants.CATEGORY_ID];
                        StickerHelper.UpdateHasMoreMessages(category, true, true);

                        //reset in app tip for "New Stickers"
                        App.ViewModel.ResetInAppTip(1);
                    }
                    else if (subType == HikeConstants.REMOVE_STICKER)
                    {
                        string category = (string)jsonData[HikeConstants.CATEGORY_ID];
                        JArray jarray = (JArray)jsonData["stIds"];
                        List<string> listStickers = new List<string>();
                        for (int i = 0; i < jarray.Count; i++)
                        {
                            listStickers.Add((string)jarray[i]);
                        }
                        StickerHelper.DeleteSticker(category, listStickers);
                        RecentStickerHelper.DeleteSticker(category, listStickers);

                    }
                    else if (subType == HikeConstants.REMOVE_CATEGORY)
                    {
                        string category = (string)jsonData[HikeConstants.CATEGORY_ID];
                        StickerHelper.DeleteCategory(category);
                        RecentStickerHelper.DeleteCategory(category);
                    }

                }
                catch (Exception e)
                {
                    Debug.WriteLine("NETWORK MANAGER :: Exception in ADD Sticker: " + e.StackTrace);
                }
            }
            #endregion
            #region Pro Tips

            else if (HikeConstants.MqttMessageTypes.PRO_TIPS == type)
            {
                JObject data = null;

                try
                {
                    data = (JObject)jsonObj[HikeConstants.DATA];
                    var id = (string)data[HikeConstants.PRO_TIP_ID];
                    var header = (string)data[HikeConstants.PRO_TIP_HEADER];
                    var text = (string)data[HikeConstants.PRO_TIP_TEXT];

                    var imageUrl = "";
                    try
                    {
                        imageUrl = (string)data[HikeConstants.PRO_TIP_IMAGE];
                    }
                    catch
                    {
                        imageUrl = "";
                    }

                    var base64Image = "";
                    try
                    {
                        base64Image = (string)data[HikeConstants.THUMBNAIL];
                    }
                    catch
                    {
                        base64Image = "";
                    }

                    ProTipHelper.Instance.AddProTip(id, header, text, imageUrl, base64Image);
                }
                catch (Exception ex)
                {
                    Debug.WriteLine("Network Manager:: ProTip, Json : {0} Exception : {1}", jsonObj.ToString(Formatting.None), ex.StackTrace);
                }
            }

            #endregion
            #region CHAT BACKGROUND
            else if (HikeConstants.MqttMessageTypes.CHAT_BACKGROUNDS == type)
            {
                try
                {
                    ConvMessage cm;
                    var ts = (long)jsonObj[HikeConstants.TIMESTAMP];
                    if (ts > 0)
                    {
                        long timedifference;
                        if (App.appSettings.TryGetValue(HikeConstants.AppSettings.TIME_DIFF_EPOCH, out timedifference))
                            ts = ts - timedifference;
                    }

                    var to = (string)jsonObj[HikeConstants.TO];

                    if (!String.IsNullOrEmpty(to) && Utils.isGroupConversation(to))
                        GroupManager.Instance.LoadGroupParticipants(to);

                    if (!String.IsNullOrEmpty(to) && Utils.isGroupConversation(to) && !GroupManager.Instance.GroupCache.ContainsKey(to))
                    {
                        Debug.WriteLine("OnMesage: Chat backgrounds: Group not found - {0}", to);
                        return;
                    }

                    var sender = !String.IsNullOrEmpty(to) ? to : msisdn;

                    var data = (JObject)jsonObj[HikeConstants.DATA];
                    var bgId = (string)data[HikeConstants.BACKGROUND_ID];

                    ChatThemeData bg = null;
                    if (ChatBackgroundHelper.Instance.ChatBgMap.TryGetValue(sender, out bg))
                    {
                        if (bg.Timestamp > ts || bg.BackgroundId == bgId)
                            return;
                    }

                    bool hasCustomBg = false;
                    JToken custom;
                    if (data.TryGetValue(HikeConstants.HAS_CUSTOM_BACKGROUND, out custom))
                        hasCustomBg = (bool)custom;

                    if (!hasCustomBg && ChatBackgroundHelper.Instance.BackgroundIDExists(bgId))
                    {
                        if (!String.IsNullOrEmpty(to) && GroupManager.Instance.GroupCache.ContainsKey(to))
                        {
                            //if group chat, message text will be set in the constructor else it will be updated by MessagesTableUtils.addChatMessage
                            cm = new ConvMessage(ConvMessage.ParticipantInfoState.CHAT_BACKGROUND_CHANGED, jsonObj, ts);
                        }
                        else
                        {
                            cm = new ConvMessage(String.Empty, msisdn, ts, ConvMessage.State.RECEIVED_UNREAD);
                            cm.GrpParticipantState = ConvMessage.ParticipantInfoState.CHAT_BACKGROUND_CHANGED;
                        }

                        cm.MetaDataString = "{\"t\":\"cbg\"}";
                    }
                    else
                        return;

                    ConversationListObject obj = MessagesTableUtils.addChatMessage(cm, false, null, sender);

                    if (hasCustomBg || !ChatBackgroundHelper.Instance.BackgroundIDExists(bgId))
                        cm.GrpParticipantState = ConvMessage.ParticipantInfoState.NO_INFO;

                    if (obj != null)
                    {
                        bool isPush = true;
                        JToken pushJToken;
                        if (data.TryGetValue(HikeConstants.PUSH, out pushJToken))
                            isPush = (Boolean)pushJToken;

                        object[] vals;
                        vals = new object[3];
                        vals[0] = cm;
                        vals[1] = obj;
                        vals[2] = isPush;

                        this.pubSub.publish(HikePubSub.MESSAGE_RECEIVED, vals);
                    }

                    if (!hasCustomBg && ChatBackgroundHelper.Instance.UpdateChatBgMap(sender, bgId, ts))
                    {
                        pubSub.publish(HikePubSub.CHAT_BACKGROUND_REC, sender);
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine("Network Manager:: Chat Background, Json : {0} Exception : {1}", jsonObj.ToString(Formatting.None), ex.StackTrace);
                }
            }
            #endregion
            #region App Update

            else if (HikeConstants.MqttMessageTypes.APP_UPDATE == type)
            {
                JObject data = null;

                try
                {
                    data = (JObject)jsonObj[HikeConstants.DATA];
                    var devType = (string)data[HikeConstants.DEVICE_TYPE_KEY];

                    if (devType != "windows")
                        return;

                    var version = (string)data[HikeConstants.VERSION];

                    if (Utils.compareVersion(version, App.CURRENT_VERSION) <= 0)
                        return;

                    bool isCritical = false;
                    try
                    {
                        isCritical = (bool)data[HikeConstants.CRITICAL];
                    }
                    catch
                    {
                        isCritical = false;
                    }

                    var message = "";
                    try
                    {
                        message = (string)data[HikeConstants.TEXT_UPDATE_MSG];
                    }
                    catch
                    {
                        message = isCritical ? AppResources.CRITICAL_UPDATE_TEXT : AppResources.NORMAL_UPDATE_TEXT;
                    }

                    JObject obj = new JObject();
                    obj.Add(HikeConstants.CRITICAL, isCritical);
                    obj.Add(HikeConstants.TEXT_UPDATE_MSG, message);
                    obj.Add(HikeConstants.VERSION, version);
                    App.WriteToIsoStorageSettings(HikeConstants.AppSettings.NEW_UPDATE_AVAILABLE, obj.ToString(Newtonsoft.Json.Formatting.None));

                    pubSub.publish(HikePubSub.APP_UPDATE_AVAILABLE, null); // no need of any arguments
                }
                catch (Exception ex)
                {
                    Debug.WriteLine("Network Manager:: APP UPDATE, Json : {0} Exception : {1}", jsonObj.ToString(Formatting.None), ex.StackTrace);
                }
            }

            #endregion
            #region ACTION
            else if (type == ACTION)
            {
                JObject data = null;

                try
                {
                    data = (JObject)jsonObj[HikeConstants.DATA];
                    bool isRegisterPush = (bool)data[HikeConstants.PUSH];

                    if (isRegisterPush)
                        PushHelper.Instance.registerPushnotifications(true);

                }
                catch (Exception ex)
                {
                    Debug.WriteLine("Network Manager:: ACTION, Json : {0} Exception : {1}", jsonObj.ToString(Formatting.None), ex.StackTrace);
                }

            }
            #endregion
            #region IC REMOVE
            else if (type == ICON_REMOVE)
            {
                try
                {
                    MiscDBUtil.DeleteImageForMsisdn(msisdn);
                    UI_Utils.Instance.BitmapImageCache.Remove(msisdn);

                    if (App.ViewModel.ConvMap.ContainsKey(msisdn))
                    {
                        App.ViewModel.ConvMap[msisdn].Avatar = null;
                        this.pubSub.publish(HikePubSub.UPDATE_PROFILE_ICON, msisdn);
                    }

                    ConversationListObject c = App.ViewModel.GetFav(msisdn);

                    if (c != null) // for favourites
                    {
                        c.Avatar = null;
                    }
                    else
                    {
                        c = App.ViewModel.GetPending(msisdn);
                        if (c != null) // for pending requests
                        {
                            c.Avatar = null;
                        }
                    }

                    if (App.ViewModel.ContactsCache.ContainsKey(msisdn))
                    {
                        // this is done to notify that image is changed so load new one.
                        App.ViewModel.ContactsCache[msisdn].Avatar = null;
                    }

                    Deployment.Current.Dispatcher.BeginInvoke(() =>
                        {
                            App.ViewModel.UpdateUserImageInStatus(msisdn);
                        });
                }
                catch (JsonReaderException ex)
                {
                    Debug.WriteLine("NetworkManager ::  onMessage : Icon Remove Handling, Exception : " + ex.Message);
                }
            }
            #endregion
            #region Server Tips
            else if (TIPS_POPUP == type)
            {
                try
                {
                    JToken subtype = jsonObj[HikeConstants.SUB_TYPE];
                    JObject data = (JObject)jsonObj[HikeConstants.DATA];
                    JToken headertext;

                    if (!data.TryGetValue(TIPS_HEADER, out headertext))
                        headertext = String.Empty;

                    JToken bodyText;

                    if (!data.TryGetValue(TIPS_BODY, out bodyText))
                        bodyText = String.Empty;

                    TipManager.Instance.AddTip((string)subtype, (string)headertext, (string)bodyText, (string)data[TIPS_ID]);
                }
                catch (Exception e)
                {
                    Debug.WriteLine("NetworkManager :: OnMessage : TipsException " + e.StackTrace);
                }
            }
            #endregion
            #region OTHER
            else
            {
                //logger.Info("WebSocketPublisher", "Unknown Type:" + type);
            }
            #endregion
        }

        private ConvMessage ProcessBulkMessageData(JObject jsonObj)
        {
            ConvMessage convMessage = null;

            if (jsonObj == null)
                return null;
            try
            {
                string type = (string)jsonObj[HikeConstants.TYPE];
                if (type == MESSAGE)
                {
                    try
                    {
                        convMessage = new ConvMessage(jsonObj);
                        if (Utils.isGroupConversation(convMessage.Msisdn))
                            GroupManager.Instance.LoadGroupParticipants(convMessage.Msisdn);
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine("NetworkManager ::  onMessage :  MESSAGE convmessage, Exception : " + ex.StackTrace);
                        return null;
                    }

                    convMessage.MessageStatus = ConvMessage.State.RECEIVED_UNREAD;
                }
                else
                {
                    onMessage(jsonObj.ToString(Newtonsoft.Json.Formatting.None));
                }
            }
            catch (JsonReaderException ex)
            {
                Debug.WriteLine("NetworkManager ::  onMessage : json Parse type, Exception : " + ex.StackTrace);
                return convMessage;
            }
            return convMessage;
        }

        private void LoadFavAndPending(bool isFav, string msisdn)
        {
            if (msisdn == null)
                return;

            if (isFav)
            {
                if (App.ViewModel.Isfavourite(msisdn))
                    return;
                ConversationListObject favObj = null;
                if (App.ViewModel.ConvMap.ContainsKey(msisdn))
                {
                    favObj = App.ViewModel.ConvMap[msisdn];
                }
                else
                {
                    // here no need to call cache
                    ContactInfo ci = UsersTableUtils.getContactInfoFromMSISDN(msisdn);
                    favObj = new ConversationListObject(msisdn, ci != null ? ci.Name : null, ci != null ? ci.OnHike : true, ci != null ? MiscDBUtil.getThumbNailForMsisdn(msisdn) : null);
                }
                Deployment.Current.Dispatcher.BeginInvoke(() =>
                {
                    App.ViewModel.FavList.Add(favObj);
                    MiscDBUtil.SaveFavourites();
                    MiscDBUtil.SaveFavourites(favObj);
                    int count = 0;
                    App.appSettings.TryGetValue<int>(HikeViewModel.NUMBER_OF_FAVS, out count);
                    App.WriteToIsoStorageSettings(HikeViewModel.NUMBER_OF_FAVS, count + 1);
                });
            }
            else // pending case
            {
                if (App.ViewModel.IsPending(msisdn))
                    return;
                ConversationListObject favObj = null;
                if (App.ViewModel.ConvMap.ContainsKey(msisdn))
                {
                    favObj = App.ViewModel.ConvMap[msisdn];
                }
                else
                {
                    // no need to call cache here
                    ContactInfo ci = UsersTableUtils.getContactInfoFromMSISDN(msisdn);
                    favObj = new ConversationListObject(msisdn, ci != null ? ci.Name : null, ci != null ? ci.OnHike : true, ci != null ? MiscDBUtil.getThumbNailForMsisdn(msisdn) : null);
                }
                App.ViewModel.PendingRequests[favObj.Msisdn] = favObj;
                MiscDBUtil.SavePendingRequests();
            }
        }

        private List<GroupParticipant> GetDNDMembers(string grpId)
        {
            List<GroupParticipant> members = GroupManager.Instance.GetParticipantList(grpId);
            List<GroupParticipant> output = null;

            for (int i = 0; i < members.Count; i++)
            {
                if (!members[i].IsOnHike && members[i].IsDND && !members[i].IsUsed)
                {
                    if (output == null)
                        output = new List<GroupParticipant>();
                    output.Add(members[i]);
                    members[i].IsUsed = true;
                }
            }
            return output;
        }

        private string GetDndMsg(List<GroupParticipant> dndMembersList)
        {
            StringBuilder msgText = new StringBuilder();
            if (dndMembersList.Count == 1)
                msgText.Append(dndMembersList[0].FirstName);
            else if (dndMembersList.Count == 2)
                msgText.Append(dndMembersList[0].FirstName + AppResources.And_txt + dndMembersList[1].FirstName);
            else
            {
                for (int i = 0; i < dndMembersList.Count; i++)
                {
                    msgText.Append(dndMembersList[i].FirstName);
                    if (i == dndMembersList.Count - 2)
                        msgText.Append(AppResources.And_txt);
                    else if (i < dndMembersList.Count - 2)
                        msgText.Append(",");
                }
            }
            return string.Format(AppResources.WAITING_TO_JOIN, msgText.ToString());
        }

        private void ProcessUoUjMsgs(JObject jsonObj, bool isOptInMsg, bool isUserInContactList, bool isRejoin)
        {
            int credits = 0;

            string ms = null;
            try
            {
                JObject data = (JObject)jsonObj[HikeConstants.DATA];
                ms = (string)data[HikeConstants.MSISDN];
                try
                {
                    credits = (int)data["credits"];
                }
                catch (Exception e)
                {
                    Debug.WriteLine("NETWORK MANAGER :: Exception in ProcessUoUjMsgs : " + e.StackTrace);
                    credits = 0;
                }
            }
            catch (Exception e)
            {
                ms = null;
            }
            if (ms == null)
                return;
            /* Process UO for 1-1 chat*/

            if (isUserInContactList)
            {
                if (!isOptInMsg || App.ViewModel.ConvMap.ContainsKey(ms)) // if this is UJ or conversation has this msisdn go in
                {
                    object[] vals = null;
                    ConvMessage cm = null;
                    if (isOptInMsg)
                        cm = new ConvMessage(ConvMessage.ParticipantInfoState.USER_OPT_IN, jsonObj);
                    else
                        cm = new ConvMessage(isRejoin ? ConvMessage.ParticipantInfoState.USER_REJOINED : ConvMessage.ParticipantInfoState.USER_JOINED, jsonObj);
                    cm.Msisdn = ms;
                    ConversationListObject obj = MessagesTableUtils.addChatMessage(cm, false);
                    if (obj == null)
                    {
                        GroupManager.Instance.SaveGroupCache(cm.Msisdn);
                        //App.WriteToIsoStorageSettings(App.GROUPS_CACHE, GroupManager.Instance.GroupCache);
                        return;
                    }
                    if (credits <= 0)
                        vals = new object[2];
                    else                    // this shows that we have to show credits msg as this user got credits.
                    {
                        string text = string.Format(AppResources.CREDITS_EARNED, credits);
                        JObject o = new JObject();
                        o.Add("t", "credits_gained");
                        ConvMessage cmCredits = new ConvMessage(ConvMessage.ParticipantInfoState.CREDITS_GAINED, o);
                        cmCredits.Message = text;
                        cmCredits.Msisdn = ms;
                        obj = MessagesTableUtils.addChatMessage(cmCredits, false);
                        vals = new object[3];
                        vals[2] = cmCredits;
                    }

                    vals[0] = cm;
                    vals[1] = obj;

                    pubSub.publish(HikePubSub.MESSAGE_RECEIVED, vals);
                }
            }
            // UPDATE group cache
            foreach (string key in GroupManager.Instance.GroupCache.Keys)
            {
                List<GroupParticipant> l = GroupManager.Instance.GroupCache[key];
                GroupParticipant gp = l.Find(x => x.Msisdn == ms);
                if (gp != null)
                {
                    if (isOptInMsg)
                    {
                        ConvMessage convMsg = new ConvMessage(ConvMessage.ParticipantInfoState.USER_OPT_IN, jsonObj);

                        object[] values = null;
                        convMsg.Msisdn = key;
                        convMsg.Message = ms;
                        ConversationListObject co = MessagesTableUtils.addChatMessage(convMsg, false);
                        if (co == null)
                        {
                            GroupManager.Instance.SaveGroupCache();
                            return;
                        }
                        if (credits > 0)                    // this shows that we have to show credits msg as this user got credits.
                        {
                            string text = string.Format(AppResources.CREDITS_EARNED, credits);
                            JObject o = new JObject();
                            o.Add("t", "credits_gained");
                            ConvMessage cmCredits = new ConvMessage(ConvMessage.ParticipantInfoState.CREDITS_GAINED, o);
                            cmCredits.Message = text;
                            cmCredits.Msisdn = key;
                            co = MessagesTableUtils.addChatMessage(cmCredits, false);
                            if (co == null)
                            {
                                GroupManager.Instance.SaveGroupCache();
                                return;
                            }
                            values = new object[3];
                            values[2] = cmCredits;
                        }
                        else
                            values = new object[2];

                        values[0] = convMsg;
                        values[1] = co;

                        pubSub.publish(HikePubSub.MESSAGE_RECEIVED, values);
                    }
                    else
                        gp.IsOnHike = true;
                    gp.HasOptIn = true;
                }
            }
            GroupManager.Instance.SaveGroupCache();
        }

        #region OLD ADD GROUPMEMBERS LOGIC
        /// <summary>
        /// This function will return 
        ///  -- > true , if new users are added to GC
        ///  -- > false , if GCJ is come to notify DND status
        //private bool AddGroupmembers(JArray arr, string grpId)
        //{
        //    if (App.ViewModel.ConvMap.ContainsKey(grpId))
        //    {
        //        List<GroupParticipant> l = null;
        //        GroupManager.Instance.GroupCache.TryGetValue(grpId, out l);
        //        if (l == null)
        //            return true;

        //        bool saveCache = false;
        //        bool output = true;
        //        for (int i = 0; i < arr.Count; i++)
        //        {
        //            JObject o = (JObject)arr[i];
        //            bool onhike = (bool)o["onhike"];
        //            bool dnd = (bool)o["dnd"];
        //            string ms = (string)o["msisdn"];
        //            for (int k = 0; k < l.Count; k++)
        //            {
        //                if (l[k].Msisdn == ms)
        //                {
        //                    output = false;
        //                    if (!l[k].IsOnHike && onhike) // this is the case where client thinks that a given user is not on hike but actually he is on hike
        //                    {
        //                        l[k].IsOnHike = onhike;
        //                        saveCache = true;
        //                        UsersTableUtils.updateOnHikeStatus(ms, true);
        //                    }

        //                    if (l[k].IsDND != dnd)
        //                    {
        //                        l[k].IsDND = dnd;
        //                        saveCache = true;
        //                    }

        //                    if (!onhike) // is any user is not on hike, first msg logic will be there
        //                    {
        //                        l[k].IsOnHike = onhike;
        //                        saveCache = true;
        //                    }

        //                    if (l[k].HasLeft)
        //                    {
        //                        l[k].HasLeft = false;
        //                        saveCache = true;
        //                        output = true;
        //                    }
        //                    break;
        //                }
        //            }
        //        }
        //        if (saveCache)
        //            App.WriteToIsoStorageSettings(App.GROUPS_CACHE, GroupManager.Instance.GroupCache);
        //        return output;
        //    }
        //    else
        //        return true;

        //}

        #endregion

        /*
         * This function performs 3 roles
         * 1. Same GCJ is received by user who created group
         * 2. New GCJ is received
         * 3. User is added to group.
         */
        private GroupChatState AddGroupmembers(JArray arr, string grpId, List<GroupParticipant> dndList)
        {
            if (!App.ViewModel.ConvMap.ContainsKey(grpId)) // if its a new group always return true
                return GroupChatState.NEW_GROUP;
            else
            {
                // now check if its same gcj packet created by owner or its different gcj packet
                List<GroupParticipant> l = GroupManager.Instance.GetParticipantList(grpId);
                if (l == null || l.Count == 0)
                    return GroupChatState.NEW_GROUP;

                GroupInfo gi = GroupTableUtils.getGroupInfoForId(grpId);
                if (gi != null && !gi.GroupAlive)
                    return GroupChatState.KICKEDOUT_USER_ADDED;

                GroupChatState output = GroupChatState.DUPLICATE;
                Dictionary<string, GroupParticipant> gpMap = GetGroupParticipantMap(l);
                for (int i = 0; i < arr.Count; i++)
                {
                    JObject o = (JObject)arr[i];
                    string ms = (string)o["msisdn"];
                    GroupParticipant gp = null;

                    if (!gpMap.TryGetValue(ms, out gp) || gp == null || gp.HasLeft)     // this shows this member is not in the list and is added externally
                        return GroupChatState.ADD_MEMBER;

                    else if (!gp.IsUsed)
                    {
                        bool onhike = (bool)o["onhike"];
                        bool dnd = (bool)o["dnd"];
                        gp.IsUsed = true;
                        gp.IsOnHike = onhike;
                        gp.IsDND = dnd;
                        if (!onhike && dnd) // this member is in dnd so add to dndList and show notification msg
                        {
                            gp.IsDND = true;
                            dndList.Add(gp);
                        }
                        output = GroupChatState.ALREADY_ADDED_TO_GROUP;
                    }
                    else
                        output = GroupChatState.DUPLICATE;
                }
                return output;
            }
        }

        private Dictionary<string, GroupParticipant> GetGroupParticipantMap(List<GroupParticipant> groupParticipantList)
        {
            Dictionary<string, GroupParticipant> map = new Dictionary<string, GroupParticipant>(groupParticipantList.Count);
            for (int i = 0; i < groupParticipantList.Count; i++)
                map[groupParticipantList[i].Msisdn] = groupParticipantList[i];
            return map;
        }

        /// <summary>
        /// Update message db with status sent delivered read for set of messages
        /// </summary>
        /// <param name="fromUser"></param>
        /// <param name="ids"></param>
        /// <param name="status"></param>
        /// <param name="sender"></param>
        private void updateDbBatch(string fromUser, long[] ids, int status, string sender)
        {
            if (ids == null || ids.Length == 0)
                return;
            Stopwatch st = Stopwatch.StartNew();
            string msisdn = MessagesTableUtils.updateAllMsgStatus(fromUser, ids, status, sender);
            if (msisdn == null)
            {
                string idsString = string.Empty;
                foreach (long id in ids)
                {
                    idsString = string.Format("{0}, {1}", idsString, id.ToString());
                }
                Debug.WriteLine("NetworkManager :: UpdateDbBatch : msisdn null for user:{0} ,ids:{1}, status:{2}", fromUser, idsString, status);
                return;
            }
            // To update conversation object , we have to check if ids [] contains last msg id
            if (App.ViewModel.ConvMap.ContainsKey(msisdn))
            {
                if (ContainsLastMsgId(ids, App.ViewModel.ConvMap[msisdn]))
                    ConversationTableUtils.updateLastMsgStatus(App.ViewModel.ConvMap[msisdn].LastMsgId, msisdn, status);
            }
            st.Stop();
            long msec = st.ElapsedMilliseconds;
            Debug.WriteLine("Time to update msg status DELIVERED READ : {0}", msec);
        }

        private bool ContainsLastMsgId(long[] ids, ConversationListObject co)
        {
            for (int i = 0; i < ids.Length; i++)
            {
                if (ids[i] == co.LastMsgId)
                    return true;
            }
            return false;
        }
    }
}